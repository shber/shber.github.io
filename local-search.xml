<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端面试题从简到繁，从点到面，一起查缺补漏吧！+ 注解</title>
    <link href="/2024/01/23/front-subject/"/>
    <url>/2024/01/23/front-subject/</url>
    
    <content type="html"><![CDATA[<p>头一次写文章，看到原作者总结的一套很全的前端知识点题目，但是没有答案所以自己边做边标注了注解，注解是按照自己的理解描述的，如有问题可以留言修改，感谢🙏</p><h2 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h2><h3 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h3><h4 id="js概念与类型检测"><a href="#js概念与类型检测" class="headerlink" title="js概念与类型检测"></a>js概念与类型检测</h4><ol><li>以下不属于 typeof 运算符返回值的是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-string">&quot;string&quot;</span><br>B. <span class="hljs-string">&quot;function&quot;</span><br>C. <span class="hljs-string">&quot;object&quot;</span><br>D. <span class="hljs-string">&quot;null&quot;</span><br></code></pre></td></tr></table></figure><p>注：<strong>D</strong> typeof运算符的返回类型为<strong>字符串</strong>，值包括如下几种： typeof(s) 或者 typeof s</p><p>        1. ‘undefined’              –未定义的变量或值</p><p>        2. ‘boolean’                 –布尔类型的变量或值</p><p>        3. ‘string’                     –字符串类型的变量或值</p><p>        4. ‘number’                  –数字类型的变量或值</p><p>        5. ‘object’                    –对象类型的变量或值（数组也是对象 new Array()），或者null(这个是js历史遗留问题，将null作为object类型处理)</p><p>        6. ‘function’                 –函数类型的变量或值</p><ol start="2"><li>执行以下代码，错误的输出结果是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 输入：<span class="hljs-keyword">typeof</span> &#123;<span class="hljs-string">&quot;x&quot;</span>:<span class="hljs-number">1</span>&#125; 输出：<span class="hljs-string">&quot;object&quot;</span> <br>B. 输入：<span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span> 输出：<span class="hljs-string">&quot;number&quot;</span> <br>C. 输入：<span class="hljs-keyword">typeof</span> [&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>&#125;] 输出：<span class="hljs-string">&quot;array&quot;</span> <br>D. 输入：<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">NaN</span> 输出：<span class="hljs-string">&quot;number&quot;</span><br></code></pre></td></tr></table></figure><p>注：<strong>C</strong> 题1</p><ol start="3"><li>可以用typeof来判断的基本类型有</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-literal">undefined</span><br>B. <span class="hljs-literal">null</span><br>C. array<br>D. object<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong></p><ol start="4"><li>以下不属于JavaScript基本数据类型的是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title class_">Boolean</span><br>B. <span class="hljs-literal">undefined</span><br>C. <span class="hljs-title class_">Symbol</span><br>D. <span class="hljs-title class_">Array</span><br></code></pre></td></tr></table></figure><p>注：<strong>D</strong> 基本数据类型有7种：null, undefined, boolean, String, Number, Sysbol, bigInt  引用数据类型：Object（Array也属于对象类型）</p><p>基本数据类型：存放在栈中，先入后出的原则，栈空间小，都是用来存放内存较小的资源</p><p>引用数据类型：存放在堆中，存放的不是值，而是值的引用，用来存放较大资源</p><p>参考文档：<a href="https://zhuanlan.zhihu.com/p/387842617">https://zhuanlan.zhihu.com/p/387842617</a></p><ol start="5"><li>以下关于JavaScript中数据类型的说法错误的是()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 数据类型分为基本数据类型和引用数据类型<br>B. <span class="hljs-title class_">JavaScript</span>一共有<span class="hljs-number">8</span>种数据类型<br>C. <span class="hljs-title class_">Object</span>是引用数据类型，且只存储于堆(heap)中<br>D. <span class="hljs-title class_">BigInt</span>是可以表示任意精度整数的基本数据类型，存储于栈(stack)中<br></code></pre></td></tr></table></figure><p>注：<strong>C</strong>，请留言解释下，没查出这题的问题</p><h4 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h4><ol><li>请选择结果为ture的表达式？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-literal">null</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span><br>B. <span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span><br>C. <span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span><br>D. <span class="hljs-title class_">NaN</span> == <span class="hljs-title class_">NaN</span><br></code></pre></td></tr></table></figure><p>注：<strong>C</strong> </p><p>null 值 <code>null</code> 特指对象的值未设置 在布尔运算中被认为是[false]</p><p>undefind 全局属性<code>undefined</code>表示原始值<code>undefined</code> 没有定义</p><p>instanceof  <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上 参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof</a></p><p>NaN 虽然表示是一个非数字，但是一般是算术运算执行的结果，因此NaN 仍然是 数值类型。<br>NaN &#x3D;&#x3D; NaN 执行结果是 false。JavaScript的规定，NaN表示的是非数字， 但是这个非数字也是不同的，因此，NaN 不等于 NaN，并且两个NaN永远不可能相等。</p><ol start="2"><li>下列代码结果为 true 的是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;a&#x27;</span>) === <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>B. <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;a&#x27;</span>) === <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>C. <span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span><br>D. &#123;&#125; === &#123;&#125;<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong> </p><p><code>Symbol()</code>函数会返回<strong>symbol</strong>类型的值，该类型具有静态属性和静态方法, 每个从<code>Symbol()</code>返回的symbol值都是唯一的。一个symbol值能作为对象属性的标识符</p><p><code>Symbol.for(key)</code>使用给定的key搜索现有的symbol，如果找到则返回该symbol。否则将使用给定的key在全局symbol注册表中创建一个新的symbol。<br>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol</a></p><ol start="3"><li>根据如下变量，下列表达式中返回值为true的是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> b = [];<br><span class="hljs-keyword">var</span> c = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">var</span> d = <span class="hljs-literal">true</span>;<br><br>A. (a || b) === <span class="hljs-literal">true</span> <br>B. (b &amp;&amp; c) === <span class="hljs-literal">true</span> <br>C. (c &amp;&amp; d) === <span class="hljs-literal">true</span> <br>D. (d || a) === <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>注：<strong>D</strong> 当进行&#x3D;&#x3D;比较时候： 先检查两个操作数数据类型，如果相同， 则进行&#x3D;&#x3D;&#x3D;比较， 如果不同则 <del>强制把等号后面的值转成等号前面的值</del> 转换成相同类型后再进行比较。 而&#x3D;&#x3D;&#x3D;比较时， 如果类型不同，直接就是false.</p><ol start="4"><li>1&#x3D;&#x3D;true的返回值是true，这句话是否正确？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">A. T<br>B. F<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong> 在&#x3D;&#x3D;的隐式转化中，是对两边进行Number(), Number(true) &#x3D; 1, 可以思考 2&#x3D;&#x3D;true</p><ol start="5"><li>浏览器环境下，下面代码输出为true的是?</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;12&quot;</span> === <span class="hljs-number">12</span>)<br>B. <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span> (<span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span>)<br>C. <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span> (<span class="hljs-title function_">typeof</span>(<span class="hljs-literal">null</span>) === <span class="hljs-title function_">typeof</span>(<span class="hljs-variable language_">window</span>))<br>D. <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span> ([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] === [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p>注：<strong>C</strong>  null因为js的设计问题，返回Object</p><ol start="6"><li>下面代码输出为true的是?</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([] === []);<br>B. <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">undefined</span> == <span class="hljs-number">0</span>);<br>C. <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">undefined</span> == <span class="hljs-literal">false</span>);<br>D. <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">false</span> == <span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>D</strong></p><ol start="7"><li>以下表达式，正确的是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;a&#x27;</span>) == <span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>B. -<span class="hljs-number">1</span> == <span class="hljs-literal">true</span><br>C. <span class="hljs-number">3</span> + <span class="hljs-string">&#x27;2&#x27;</span> === <span class="hljs-number">5</span><br>D. ![] == <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>注：<strong>D</strong></p><h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><ol><li>如何把 7.25 四舍五入为最接近的整数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">7.25</span>)<br>B. <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">7.25</span>)<br>C. <span class="hljs-title function_">round</span>(<span class="hljs-number">7.25</span>)<br>D. <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">rnd</span>(<span class="hljs-number">7.25</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong> A-返回四舍五入后的整数。，B-返回大于一个数的最小整数，即一个数向上取整后的值。参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math</a></p><ol start="2"><li>下面哪个选项可以产生0&lt;&#x3D;num&lt;&#x3D;10的随机整数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">6</span>)<br>B. <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">10</span>)<br>C. <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">11</span>)<br>D. <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>C D</strong>  </p><p>Math.floor返回小于一个数的最大整数，即一个数向下取整后的值。</p><p>Math.ceil返回大于一个数的最小整数，即一个数向上取整后的值。</p><p>Math.random返回一个 0 到 1 之间的伪随机数。</p><ol start="3"><li>以下( )表达式产生一个0~7之间(含0,7)的随机整数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">6</span>)<br>B. <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">7</span>)<br>C. <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>C</strong></p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ol><li>split() 方法用于把一个字符串分割成字符串数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">A. T<br>B. F<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong></p><ol start="2"><li>String对象的哪个方法可以寻找子字符串并返回该子字符串位置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title function_">match</span>()<br>B. <span class="hljs-title function_">indexOf</span>()<br>C. <span class="hljs-title function_">search</span>()<br>D. <span class="hljs-title function_">concat</span>()<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong> 参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String</a></p><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><ol><li>下面哪一个是JSON数据？</li></ol><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">A</span><span class="hljs-operator">.</span> ｛<span class="hljs-variable">name</span><span class="hljs-operator">:</span><span class="hljs-string">&quot;xiaoming&quot;</span><span class="hljs-operator">,</span><span class="hljs-variable">age</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;student&quot;</span>｝<br><span class="hljs-variable">B</span><span class="hljs-operator">.</span> ｛<span class="hljs-string">&quot;name&quot;</span><span class="hljs-operator">:</span><span class="hljs-string">&quot;xiaoming&quot;</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;age&quot;</span><span class="hljs-operator">:</span><span class="hljs-string">&quot;student&quot;</span>｝<br><span class="hljs-built_in">C</span><span class="hljs-operator">.</span> ｛<span class="hljs-string">&quot;xiaoming&quot;</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;student&quot;</span>｝<br><span class="hljs-built_in">D</span><span class="hljs-operator">.</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;xiaoming&quot;</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;student&quot;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>注：<strong>B</strong></p><ol start="2"><li>下面分别使用 JSON.stringify 方法，返回值 res 分别是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-keyword">const</span> res = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(fn)<br><span class="hljs-keyword">const</span> num = <span class="hljs-number">123</span><br><span class="hljs-keyword">const</span> res = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(num)<br><span class="hljs-keyword">const</span> res = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-title class_">NaN</span>)<br><span class="hljs-keyword">const</span> b = <span class="hljs-literal">true</span><br><span class="hljs-keyword">const</span> res = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(b)<br><br>A. <span class="hljs-string">&#x27;function&#x27;</span>、<span class="hljs-string">&#x27;123&#x27;</span>、<span class="hljs-string">&#x27;NaN&#x27;</span>、<span class="hljs-string">&#x27;true&#x27;</span><br>B. <span class="hljs-literal">undefined</span>、<span class="hljs-string">&#x27;123&#x27;</span>、<span class="hljs-literal">undefined</span>、<span class="hljs-string">&#x27;true&#x27;</span><br>C. <span class="hljs-literal">undefined</span>、<span class="hljs-string">&#x27;123&#x27;</span>、<span class="hljs-string">&#x27;null&#x27;</span>、<span class="hljs-string">&#x27;true&#x27;</span><br>D. <span class="hljs-literal">undefined</span>、<span class="hljs-string">&#x27;123&#x27;</span>、<span class="hljs-string">&#x27;null&#x27;</span>、<span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><p>注：<strong>C</strong> 参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify</a></p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ol><li>js数组中不会改变原有数组的方法是()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. push<br>B. concat<br>C. sort<br>D. shift<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong>  参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p><ol start="2"><li>下列哪种数组的方法不会修改数组本身</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. slice<br>B. splice<br>C. sort<br>D. unshift<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong></p><ol start="3"><li>JavaScript中需要往数组末尾处添加一个元素，应该使用以下哪个方法：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. push<br>B. pop<br>C. shift<br>D. unshift<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong></p><ol start="4"><li>以下js操作Array的方法中不能添加元素的是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. push<br>B. pop<br>C. unshift<br>D. splice<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong> B-删除最后一个元素</p><ol start="5"><li>数组以下哪个方法会影响原数组？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. concat<br>B. splice<br>C. slice<br>D. join<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong>  通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容</p><ol start="6"><li>JavaScript中，下列哪一个Array的方法的返回值类型和其他不同</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. concat<br>B. shift<br>C. filter<br>D. map<br></code></pre></td></tr></table></figure><p>注: <strong>B</strong>  shift 从数组中删除第一个元素，并返回该元素的值</p><ol start="7"><li>如下的Array.prototype上的方法中，那个方法不会改变原有的数组？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. push<br>B. slice<br>C. splice<br>D. sort<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong></p><ol start="8"><li>对于一个数字组成的数组 nums，现在需要执行在不改动 nums 的基础上去重操作，返回一个新的无重复元素的数组，以下几段代码能完成这一操作的是()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// (1)</span><br><span class="hljs-keyword">const</span> newNums = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(nums))<br><br><span class="hljs-comment">// (2)</span><br><span class="hljs-keyword">const</span> newNums = nums.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">n, i</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> nums.<span class="hljs-title function_">indexOf</span>(n) === i<br>&#125;)<br><br><span class="hljs-comment">// (3)</span><br><span class="hljs-keyword">const</span> newNums = nums.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">n, i</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> nums.<span class="hljs-title function_">indexOf</span>(n) === i<br>&#125;)<br><br><span class="hljs-comment">// (4)</span><br><span class="hljs-keyword">const</span> newNums = nums.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, n, i</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> [].<span class="hljs-title function_">concat</span>(acc, nums.<span class="hljs-title function_">indexOf</span>(n) === i ? n : []<br>&#125;)<br><br><br>A. (<span class="hljs-number">1</span>)、(<span class="hljs-number">2</span>)、(<span class="hljs-number">3</span>)、(<span class="hljs-number">4</span>) <br>B. (<span class="hljs-number">1</span>)、(<span class="hljs-number">3</span>)、(<span class="hljs-number">4</span>) <br>C. (<span class="hljs-number">1</span>)、(<span class="hljs-number">2</span>)、(<span class="hljs-number">4</span>) <br>D. (<span class="hljs-number">1</span>)、(<span class="hljs-number">4</span>)<br><br></code></pre></td></tr></table></figure>注：<strong>C</strong> forEach无返回值</li></ol><h4 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h4><ol><li>正则表达式 ^d+[^d]+ 能匹配下列哪个字符串？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-number">123</span><br>B. 123a<br>C. d123<br>D. 123def<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong> 正则是真拉胯。。。参考链接：<a href="https://www.runoob.com/jsref/jsref-obj-regexp.html">https://www.runoob.com/jsref/jsref-obj-regexp.html</a></p><ol start="2"><li>下面哪个不是RegExp对象的方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. test<br>B. match<br>C. exec<br>D. compile<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong></p><ol start="3"><li>以下哪项可以去除变量str中的所有空格</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">`/\s*/g,&quot;&quot;`</span>)<br>B. str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">`/^\s|\s$/g,&quot;&quot;`</span>)<br>C. str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">`/^\s*/, &quot;&quot;`</span>)<br>D. str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">`/(\s*$)/g, &quot;&quot;`</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong><br>^n 匹配任何开头为 n 的字符串，</p><p>n* 匹配任何包含零个或多个 n 的字符串，</p><p>n$ 匹配任何结尾为 n 的字符串</p><p>g 全局</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol><li>下列函数哪个不是JavaScript的全局函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-built_in">encodeURI</span><br>B. <span class="hljs-built_in">parseFloat</span><br>C. round<br>D. <span class="hljs-built_in">eval</span><br></code></pre></td></tr></table></figure><p>注：<strong>C</strong></p><ol start="2"><li>编写高性能JavaScript，以下描述错误的是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 遵循严格模式：<span class="hljs-string">&quot;use strict&quot;</span><br>B. 将js脚本放在页面顶部，加快渲染页面<br>C. 将js脚本成组打包，减少请求，尽量减少使用闭包<br>D. 使用非阻塞方式下载js脚本，最小化重绘(repaint)和回流(reflow)<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong> 页面构建顺序，先解析html构建DOM树，然后解析css构建cssDom树，然后加载js，js会阻塞Dom渲染，如果js中有操作css，还会阻塞css的渲染</p><ol start="3"><li>有关JavaScript中系统方法的描述，错误的是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-built_in">parseFloat</span>方法：该方法将一个字符串转换成对应的小数<br>B. <span class="hljs-built_in">isNaN</span>方法：该方法用于检测参数是否为数值型，如果是，返回<span class="hljs-literal">true</span>，否则，返回<span class="hljs-literal">false</span>。<br>C. <span class="hljs-built_in">escape</span>方法： 该方法返回对一个字符串编码后的结果字符串<br>D. <span class="hljs-built_in">eval</span>方法：该方法将某个参数字符串作为一个<span class="hljs-title class_">JavaScript</span>执行题<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong> isNaN 用于检测参数是否是非数值型，如果是数值返回false，否则返回true</p><ol start="4"><li>下面列出的浏览器，无webkit内核的是()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. chrome<br>B. <span class="hljs-title class_">Safari</span><br>C. 搜狗浏览器<br>D. <span class="hljs-title class_">Firefox</span><br></code></pre></td></tr></table></figure><p>注：<strong>D</strong></p><ol start="5"><li>下列代码哪个能够实现获取形式为 2017-08-01 形式的日期( )？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// A</span><br><span class="hljs-keyword">var</span> formatDate=<span class="hljs-title function_">getDate</span>()<br><span class="hljs-comment">// B</span><br><span class="hljs-keyword">var</span> formatDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-comment">// C</span><br><span class="hljs-keyword">var</span> formatDate = <span class="hljs-keyword">function</span> (<span class="hljs-params">date</span>) &#123;<br>    <span class="hljs-keyword">var</span> y = date.<span class="hljs-title function_">getFullYear</span>();<br>    <span class="hljs-keyword">var</span> m = date.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> d = date.<span class="hljs-title function_">getDate</span>();<br>    <span class="hljs-keyword">return</span> y + <span class="hljs-string">&#x27;-&#x27;</span> + m + <span class="hljs-string">&#x27;-&#x27;</span> + d;<br>&#125;;<br><span class="hljs-comment">// D</span><br><span class="hljs-keyword">var</span> formatDate = <span class="hljs-keyword">function</span> (<span class="hljs-params">date</span>) &#123;<br>    <span class="hljs-keyword">var</span> y = date.<span class="hljs-title function_">getFullYear</span>();<br>    <span class="hljs-keyword">var</span> m = date.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>;<br>    m = m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + m : m;<br>    <span class="hljs-keyword">var</span> d = date.<span class="hljs-title function_">getDate</span>();<br>    d = d &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + d) : d;<br>    <span class="hljs-keyword">return</span> y + <span class="hljs-string">&#x27;-&#x27;</span> + m + <span class="hljs-string">&#x27;-&#x27;</span> + d;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注：<strong>D</strong></p><ol start="6"><li>下面哪一项不能最小化重绘(repaint)和回流(reflow)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 需要对元素进行复杂的操作时，可以先隐藏(<span class="hljs-attr">display</span>:<span class="hljs-string">&quot;none&quot;</span>)，操作完成后再显示<br>B. 需要创建多个<span class="hljs-variable constant_">DOM</span>节点时，使用<span class="hljs-title class_">DocumentFragment</span>创建完后一次性的加入<span class="hljs-variable language_">document</span><br>C. 尽量避免用table布局(table元素一旦触发回流就会导致table里所有的其它元素回流)<br>D. 尽量不要使用 css 属性简写，如：用border-width, border-style, border-color代替border<br></code></pre></td></tr></table></figure><p>注：<strong>D</strong></p><p>重绘也叫重排：指DOM元素的几何属性发生变化或者DOM节点隐藏后，导致DOM元素的X，Y轴位置发生变化重新绘制页面的过程，所以一些动画效果尽量定位，脱离文档流，这时候属于分层，不触发重排。<strong>重排一定会触发重绘，重绘不一定触发重排</strong></p><p>重绘：DOM的属性样式类发生变化，例如：背景色变化，圆角等</p><h3 id="JS深入"><a href="#JS深入" class="headerlink" title="JS深入"></a>JS深入</h3><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><ol><li>下列哪种方法不能改变this指向()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-built_in">eval</span><br>B. apply<br>C. bind<br>D. call<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong> </p><p><code>eval()</code>函数会将传入的字符串当做 JavaScript 代码进行执行。返回字符串中代码的返回值。如果返回值为空，则返回 undefined</p><p><code>apply, bind， call</code> 都能改变this指向，但又有区别 参考：<a href="https://www.cnblogs.com/lmsblogs/p/11271111.html">https://www.cnblogs.com/lmsblogs/p/11271111.html</a></p><ol start="2"><li>在JavaScript中下面选项关于this描述正确的是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 在使用<span class="hljs-keyword">new</span>实例化对象时, <span class="hljs-variable language_">this</span>指向这个实例对象<br>B. 将对象的方法赋值给变量A。执行<span class="hljs-title function_">A</span>()时 该方法中的<span class="hljs-variable language_">this</span>指向这个对象。 <br>C. 在函数定义时,<span class="hljs-variable language_">this</span>指向全局变量<br>D. 在浏览器下的全局范围内，<span class="hljs-variable language_">this</span>指向全局对象<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong> 一句话普通函数的this，谁调用的指向谁，参考链接：<a href="https://www.jb51.net/article/168825.htm">https://www.jb51.net/article/168825.htm</a></p><ol start="3"><li>下面有关JavaScript中call和apply方法的描述，错误的是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. call与apply都属于<span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>的一个方法，所以每个<span class="hljs-keyword">function</span>实例都有call、apply属性<br>B. 两者传递的参数不同，call函数第一个参数都是要传入给当前对象的对象，apply不是<br>C. apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入<br>D. call传入的则是直接的参数列表。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong> 第一题注解</p><h4 id="作用域-闭包"><a href="#作用域-闭包" class="headerlink" title="作用域(闭包)"></a>作用域(闭包)</h4><ol><li>内存泄漏是 javascript 代码中必须尽量避免的，以下几段代码可能会引起内存泄漏的有()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// (1)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>    name = <span class="hljs-string">&#x27;javascript&#x27;</span><br>&#125;<br><span class="hljs-title function_">getName</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name) <span class="hljs-comment">// 该打印依然可以获取到&#x27;javascript&#x27;</span><br><br><span class="hljs-comment">// (2)</span><br><span class="hljs-keyword">const</span> elements = &#123;<br>    <span class="hljs-attr">button</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeButton</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(elements.<span class="hljs-property">button</span>);<br>&#125;<br><span class="hljs-title function_">removeButton</span>()<br><br><span class="hljs-comment">// (3)</span><br><span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> node = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#node&#x27;</span>) <br>    <span class="hljs-keyword">if</span>(node) &#123;<br>        <span class="hljs-built_in">clearInterval</span>(timer)<br>    &#125;<br>&#125;, <span class="hljs-number">1000</span>);<br><br><br>A. (<span class="hljs-number">1</span>)、(<span class="hljs-number">2</span>)、(<span class="hljs-number">3</span>)<br>B. (<span class="hljs-number">2</span>)、(<span class="hljs-number">3</span>)<br>C. (<span class="hljs-number">1</span>)、(<span class="hljs-number">3</span>)<br>D. (<span class="hljs-number">1</span>)、(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>D</strong><br>内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p><p>1, 声明了一个全局变量name，在函数执行结束后，该变量并没有销毁，与该函数还有引用关系。原因：分词，编译</p><p>2, element为全局变量，函数销毁后，关联关系已解除，但是全局变量并没有销毁，之后根据V8的垃圾处理机制对比新老生区，进行垃圾回收</p><ol start="2"><li>那个操作不会造成内存泄露</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 没有清理的<span class="hljs-variable constant_">DOM</span>元素引用<br>B. 被遗忘的定时器<br>C. 事件侦听没有移除<br>D. 局部变量不用时，没有设为<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>注：<strong>D</strong></p><ol start="3"><li>下列关于闭包理解错误的是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 增加一定的内存消耗<br>B. 使用不当可能会导致内存泄漏<br>C. 可以使用闭包模拟私有方法<br>D. 闭包会改动对象的原型链<br></code></pre></td></tr></table></figure><p>注：<strong>D</strong> 闭包：自执行函数，属于函数与外层的通讯桥梁，但是这桥梁是单行的，函数内可以访问（默认可修改）函数外，函数外不能访问函数内，自执行函数执行结束，内部变量与函数销毁，参考链接：<a href="https://www.cnblogs.com/dengyao-blogs/p/11475575.html">https://www.cnblogs.com/dengyao-blogs/p/11475575.html</a></p><h4 id="原型与继承"><a href="#原型与继承" class="headerlink" title="原型与继承"></a>原型与继承</h4><ol><li>JavaScript实现继承的方式，不正确的是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 原型链继承<br>B. 构造函数继承<br>C. 组合继承<br>D. 关联继承<br></code></pre></td></tr></table></figure><p>注：<strong>D</strong> 参考链接：<a href="https://blog.csdn.net/qq_27674439/article/details/102542041">https://blog.csdn.net/qq_27674439/article/details/102542041</a></p><ol start="2"><li>所有对象都有原型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">A. T<br>B. F<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong> 空对象都有原型, 但Object.create(null)没有. 因为Object.create(null)没有继承任何原型方法，也就是说它的原型链没有上一层</p><ol start="3"><li>以下关于原型链的描述正确的是:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 通过原型链继承的属性和对象与自己定义的属性等效<br>B. 通过原型链可以模拟对象的私有属性<br>C. 在对象上访问不存在的属性时,会依次遍历整条原型链<br>D. 所有 <span class="hljs-title class_">JavaScript</span> 中的对象都是位于原型链顶端的 <span class="hljs-string">`Object`</span> 的实例<br></code></pre></td></tr></table></figure><p>注：<strong>C</strong>  参考链接：<a href="https://www.jianshu.com/p/dee9f8b14771">https://www.jianshu.com/p/dee9f8b14771</a> ， <a href="https://www.processon.com/view/link/622ac8821efad407e989b06b">https://www.processon.com/view/link/622ac8821efad407e989b06b</a></p><h3 id="DOM题"><a href="#DOM题" class="headerlink" title="DOM题"></a>DOM题</h3><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><ol><li>将A元素拖拽并放置到B元素中，B元素需要做哪项操作()？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. event.<span class="hljs-title function_">preventDefault</span>()<br>B. event.<span class="hljs-title function_">prevent</span>()<br>C. event.<span class="hljs-title function_">drag</span>()<br>D. event.<span class="hljs-title function_">drop</span>()<br></code></pre></td></tr></table></figure><p>注：<strong>A</strong>   event.preventDefault 取消事件（如果该事件可取消）。 event.stopPropagation停止冒泡，阻止事件在 DOM 中继续冒泡。 参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event">https://developer.mozilla.org/zh-CN/docs/Web/API/Event</a></p><ol start="2"><li>以下不支持冒泡的鼠标事件为( )？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. mouseover<br>B. click<br>C. mouseleave<br>D. mousemove<br></code></pre></td></tr></table></figure><p>注：<strong>C</strong></p><ol start="3"><li>在javascript中，用于阻止默认事件的默认操作的方法是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title function_">stopDeafault</span>()<br>B. <span class="hljs-title function_">stopPropagation</span>()<br>C. <span class="hljs-title function_">preventDefault</span>()<br>D. <span class="hljs-title function_">preventDefaultEven</span>()<br></code></pre></td></tr></table></figure><p>注：<strong>C</strong></p><ol start="4"><li>事件传播的三个阶段是什么</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 目标 -&gt; 捕获 -&gt; 冒泡<br>B. 冒泡 -&gt; 目标 -&gt; 捕获<br>C. 目标 -&gt; 冒泡 -&gt; 捕获<br>D. 捕获 -&gt; 目标 -&gt; 冒泡<br></code></pre></td></tr></table></figure><p>注：<strong>D</strong></p><ol start="5"><li>下面有关 javascript 常见事件的触发情况，描述错误的是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. onchange：用户改变域的内容<br>B. onkeypress：某个键盘的键被按下或按住<br>C. onmousedown：某个鼠标按键被按下<br>D. onblur：元素获得焦点<br></code></pre></td></tr></table></figure><p>注：<strong>D</strong> onblur失去焦点。 onfocus获取焦点</p><ol start="6"><li>DOM元素的以下属性改变会导致重排(reflows)的是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. outline<br>B. visiblity<br>C. font-size<br>D. background-color<br></code></pre></td></tr></table></figure><p>注：<strong>C</strong></p><h3 id="BOM题"><a href="#BOM题" class="headerlink" title="BOM题"></a>BOM题</h3><ol><li>setInterval(updateClock,60)的含义是( )？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 每隔<span class="hljs-number">60</span>秒调用一次<span class="hljs-title function_">updateClock</span>()<br>B. 每隔<span class="hljs-number">60</span>毫秒调用一次<span class="hljs-title function_">updateClock</span>()<br>C. 每隔<span class="hljs-number">60</span>分钟调用一次<span class="hljs-title function_">updateClock</span>()<br>D. 每分钟调用<span class="hljs-number">60</span>次<span class="hljs-title function_">updateClock</span>()<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong></p><ol start="2"><li>使用方法( )可以获取到地理位置所在的经纬度？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title class_">Geolocation</span>.<span class="hljs-title function_">watchPosition</span>()<br>B. <span class="hljs-title class_">Geolocation</span>.<span class="hljs-title function_">getCurrentPosition</span>()<br>C. <span class="hljs-title class_">Geolocation</span>.<span class="hljs-title function_">getPosition</span>()<br>D. <span class="hljs-title class_">Geolocation</span>.<span class="hljs-title class_">Position</span>()<br></code></pre></td></tr></table></figure><p>注：<strong>B</strong></p><ol start="3"><li>setInterval(“alert(‘welcome’);”,1000);这段代码的意思是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 等待<span class="hljs-number">1000</span>秒后，再弹出一个对话框<br>B. 等待<span class="hljs-number">1</span>秒钟后弹出一个对话框<br>C. 每隔一秒钟弹出一个对话框<br>D. 语句报错,语法有问题<br></code></pre></td></tr></table></figure><p>注：<strong>C</strong></p><h3 id="ES6题"><a href="#ES6题" class="headerlink" title="ES6题"></a>ES6题</h3><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><ol><li>下列对js箭头函数描述错误的是()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 箭头函数没有原型属性<br>B. 箭头函数不绑定<span class="hljs-variable language_">this</span>，会捕获其所在的上下文的<span class="hljs-variable language_">this</span>值，作为自己的<span class="hljs-variable language_">this</span>值<br>C. 箭头函数可以作为构造函数，使用<span class="hljs-keyword">new</span><br>D. 箭头函数不绑定<span class="hljs-variable language_">arguments</span>，取而代之用rest参数解决<br></code></pre></td></tr></table></figure><p>注： <strong>C</strong>  参考链接：<a href="https://www.jianshu.com/p/f853d6a7b548">https://www.jianshu.com/p/f853d6a7b548</a></p><ol start="2"><li>关于箭头函数下列说法错误的一项是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 函数体内<span class="hljs-variable language_">this</span>的指向是定义时所在的对象，而不是使用时所在的对象<br>B. 箭头函数内不能使用<span class="hljs-variable language_">arguments</span>对象<br>C. 箭头函数不能使用<span class="hljs-keyword">yield</span>命令<br>D. 可以使用<span class="hljs-keyword">new</span>创建一个箭头函数的实例<br></code></pre></td></tr></table></figure><p>注：<strong>D</strong></p><h4 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h4><ol><li>关于将 Promise.all 和 Promise.race 传入空数组的两段代码的输出结果说法正确的是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;all&#x27;</span>);<br>&#125;);<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;race&#x27;</span>);<br>&#125;);<br><br>A. all 和 race 都会被输出<br>B. all 和 race 都不会被输出<br>C. all 会被输出，而 race 不会被输出<br>D. all 不会被输出，race 会被输出<br></code></pre></td></tr></table></figure><p>注：<strong>C</strong></p><p>Promise 可以将多个Promise实例包装成一个新的Promise实例。<br>同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</p><p>Promise.all([]).then().catch()获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的<br>只有所有的promise函数都返回成功状态，才会执行then方法<br>若有一个promise函数返回失败状态，则执行catch方法</p><p>Promise.race() 函数返回一个 Promise，它将与第一个传递的 promise 相同的完成方式被完成。它可以是完成（ resolves），也可以是失败（rejects），这要取决于第一个完成的方式是两个中的哪个，(<code>意思是哪个快就返回哪个，并且不关心结果状态</code>)。如果传的迭代是空的，则返回的 promise 将永远等待。</p><ol start="2"><li>以下方案中，不是用于解决回调陷阱的的是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title class_">Promise</span><br>B. <span class="hljs-title class_">Generator</span><br>C. <span class="hljs-keyword">async</span><br>D. <span class="hljs-title class_">Proxy</span><br></code></pre></td></tr></table></figure><p>注：<strong>D</strong>  Proxy代理器，可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Vue3就是把 <code>Object.definePropert()</code> 改为了 <code>Proxy（13种拦截方式）</code>， 参考链接：<a href="https://es6.ruanyifeng.com/#docs/proxy">https://es6.ruanyifeng.com/#docs/proxy</a></p><ol start="3"><li>在 ECMAScript6 中，不属于promise的状态是:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title class_">Pending</span><br>B. <span class="hljs-title class_">Pause</span><br>C. <span class="hljs-title class_">Fulfilled</span><br>D. <span class="hljs-title class_">Rejected</span><br></code></pre></td></tr></table></figure><p>注：<strong>B</strong>  参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><ol><li>关于ES6解构表达式,描述正确的是()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> [a,b, c,d, e] = <span class="hljs-string">&quot;hello&quot;</span>; <br><br>A. e = <span class="hljs-string">&quot;hello&quot;</span>;<br>B. 其它都为<span class="hljs-literal">undefined</span><br>C. 当中 a = <span class="hljs-string">&quot;h&quot;</span>, b = <span class="hljs-string">&quot;e&quot;</span>;<br>D. 语法报错<br></code></pre></td></tr></table></figure><p>注：<strong>C</strong></p><h2 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h2><h3 id="JS基础-1"><a href="#JS基础-1" class="headerlink" title="JS基础"></a>JS基础</h3><ol><li>下面哪些数组方法会改变原数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. push <br>B. concat <br>C. splice <br>D. map<br></code></pre></td></tr></table></figure><p>注：<strong>A C</strong></p><ol start="2"><li>下面可以声明数字的js代码是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-keyword">const</span> a = <span class="hljs-number">0xa1</span><br>B. <span class="hljs-keyword">const</span> a = <span class="hljs-number">076</span><br>C. <span class="hljs-keyword">const</span> a = 0b21<br>D. <span class="hljs-keyword">const</span> a = <span class="hljs-number">7e2</span><br></code></pre></td></tr></table></figure><p>注：<strong>A B D</strong></p><ol start="3"><li>以下属于操作符 typeof 的返回值的是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-number">1</span>) <span class="hljs-keyword">function</span><br>(<span class="hljs-params"><span class="hljs-number">2</span></span>) object<br>(<span class="hljs-number">3</span>) <span class="hljs-literal">null</span><br>(<span class="hljs-number">4</span>) array<br>(<span class="hljs-number">5</span>) <span class="hljs-title class_">NaN</span><br>(<span class="hljs-number">6</span>) bigint<br>(<span class="hljs-number">7</span>) regexp<br>(<span class="hljs-number">8</span>) <span class="hljs-literal">undefined</span><br><br>A. (<span class="hljs-number">1</span>)、(<span class="hljs-number">2</span>)、(<span class="hljs-number">3</span>)、(<span class="hljs-number">4</span>)、(<span class="hljs-number">5</span>)、(<span class="hljs-number">6</span>)、(<span class="hljs-number">7</span>)、(<span class="hljs-number">8</span>)<br>B. (<span class="hljs-number">1</span>)、(<span class="hljs-number">2</span>)、(<span class="hljs-number">3</span>)、(<span class="hljs-number">8</span>)<br>C. (<span class="hljs-number">1</span>)、(<span class="hljs-number">2</span>)、(<span class="hljs-number">8</span>)<br>D. (<span class="hljs-number">1</span>)、(<span class="hljs-number">2</span>)、(<span class="hljs-number">6</span>)、(<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>D</strong></p><ol start="4"><li>以下()结果等于字符串string</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;string&#x27;</span><br>B. <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;string&#x27;</span>).<span class="hljs-title function_">toString</span>()<br>C. <span class="hljs-string">&#x27;string&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">sort</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>D. (<span class="hljs-keyword">function</span>(<span class="hljs-params">string</span>)&#123;<span class="hljs-keyword">return</span> string&#125;)(<span class="hljs-string">&#x27;string&#x27;</span>)<br>E. <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;string&quot;:&quot;string&quot;&#125;&#x27;</span>).<span class="hljs-property">string</span><br></code></pre></td></tr></table></figure><p>注：<strong>A B D E</strong></p><ol start="5"><li>下面的等式成立的是?</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-built_in">parseInt</span>(<span class="hljs-number">46.8</span>) <span class="hljs-string">`==`</span> <span class="hljs-built_in">parseFloat</span>(<span class="hljs-number">46.8</span>)<br>B. <span class="hljs-title class_">NaN</span> <span class="hljs-string">`!==`</span> <span class="hljs-title class_">NaN</span><br>C. <span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;abc&#x27;</span>) <span class="hljs-string">`==`</span> <span class="hljs-title class_">NaN</span><br>D. <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">NaN</span> <span class="hljs-string">`===`</span> <span class="hljs-string">&#x27;number&#x27;</span><br></code></pre></td></tr></table></figure><p>注：<strong>B D</strong></p><ol start="6"><li>以下哪些选项可以将集合A转化为数组？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(A)<br>B. [].<span class="hljs-property">slice</span>.<span class="hljs-title function_">apply</span>(A)<br>C. [...A]<br>D. [].<span class="hljs-property">map</span>.<span class="hljs-title function_">call</span>(A, <span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> o)<br></code></pre></td></tr></table></figure><p>注：<strong>A C</strong></p><ol start="7"><li>下列结果返回 true 的是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span><br>B. <span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span><br>C. <span class="hljs-literal">null</span> === <span class="hljs-literal">null</span><br>D. <span class="hljs-title class_">NaN</span> == <span class="hljs-literal">null</span><br>E. <span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span><br>F. <span class="hljs-title class_">Infinity</span> + <span class="hljs-number">1</span> !== <span class="hljs-title class_">Infinity</span><br></code></pre></td></tr></table></figure><p>注：<strong>A C</strong>  值 <code>null</code> 特指对象的值未设置。它是 JavaScript <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">基本类型</a> 之一，在布尔运算中被认为是<a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">false</a>。</p><h3 id="JS深入-1"><a href="#JS深入-1" class="headerlink" title="JS深入"></a>JS深入</h3><ol><li>关于以下代码，说法正确的有哪些？</li></ol><p>function Person() { } var person &#x3D; new Person();</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. 每一个原型都有一个constructor属性指向关联的构造函数。<br>B. 每一个对象都有一个prototype属性。<br>C. <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(person) === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br>D. person.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Person</span><br></code></pre></td></tr></table></figure><p>注：<strong>A C D</strong></p><ol start="2"><li>下列在 JS 时间循环机制中属于微任务(microTask)的是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. process.<span class="hljs-property">nextTick</span><br>B. promise<br>C. <span class="hljs-built_in">setTimeout</span><br>D. <span class="hljs-built_in">setInterval</span><br></code></pre></td></tr></table></figure><p>注：<strong>A B</strong></p><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><ol><li>以下关于let和const的说法中正确的是:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-keyword">let</span>声明的变量值和类型都可以改变<br>B. <span class="hljs-keyword">const</span>声明的常量不可以改变<br>C. 两者都不存在变量提升，同时存在暂时性死区，只能在声明的位置后面使用<br>D. <span class="hljs-keyword">const</span>可以先声明再初始化，可以后赋值<br></code></pre></td></tr></table></figure><p>注：<strong>A B C</strong></p><ol start="2"><li>下面关于Promise说法正确的是(注意“返回结果”的意思包含成功或者失败)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-title class_">Promise</span>.<span class="hljs-property">all</span>在所有给定的promise都fulfilled后才返回结果<br>B. <span class="hljs-title class_">Promise</span>.<span class="hljs-property">race</span>在给定的promise中，某个fulfilled后才返回结果<br>C. promise.<span class="hljs-property">then</span>的回调函数中，可以返回一个新的promise<br>D. 对于一个向后台获取数据已经产生结果的<span class="hljs-attr">promise</span>:p1，再次调用p1.<span class="hljs-property">then</span>，不会去重新发起请求获取数据<br></code></pre></td></tr></table></figure><p>注：<strong>C D</strong></p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><ol><li>下列关于使用 JS 修改元素样式的代码，正确的有哪些？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.[<span class="hljs-string">&#x27;background-color&#x27;</span>] = <span class="hljs-string">&#x27;#fff&#x27;</span><br>B. <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;background-color&#x27;</span>, <span class="hljs-string">&#x27;#fff&#x27;</span>)<br>C. <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span> = <span class="hljs-string">&#x27;background-color: #fff&#x27;</span><br>D. <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-string">&#x27;14px&#x27;</span><br></code></pre></td></tr></table></figure><p>注：<strong>B C D</strong></p><ol start="2"><li>下列方法可用于阻止事件冒泡的有</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">A. event.<span class="hljs-property">cancelBubble</span> = <span class="hljs-literal">true</span>;<br>B. event.<span class="hljs-title function_">stopPropagation</span>();<br>C. event.<span class="hljs-title function_">preventDefault</span>();<br>D. <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>注：<strong>A B D</strong>  cancelBubble用于ie的阻止冒泡事件。event.stopPropagation（）用于firefox和chrome等其他浏览器。 参考链接：<a href="https://blog.csdn.net/qq_23878541/article/details/90413295">https://blog.csdn.net/qq_23878541/article/details/90413295</a></p><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><ol><li><p>在JavaScript中，有var arr &#x3D; []; typeof arr的结果为</p></li><li><p>以下使用 typeof 操作符的代码的输出结果为</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-keyword">typeof</span> x<br><span class="hljs-keyword">var</span> res = <span class="hljs-keyword">typeof</span> <span class="hljs-keyword">typeof</span> x;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, res)<br></code></pre></td></tr></table></figure><ol start="3"><li><p>[typeof null, null instanceof Object]的结果是什么</p></li><li><p>typeof typeof 0</p></li><li><p>JavaScript的typeof运算符的可能结果为array？解释为什么</p></li><li><p>下面代码的输出结果是多少？</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> arr, <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(arr));<br></code></pre></td></tr></table></figure><ol start="7"><li>console.log(Object.prototype.toString.call(undefined))</li></ol><p>注：</p><p>1, Object-数组也是对象 new Array()</p><p>2, undefind string</p><p>3, object(js语言设计问题) false</p><p>4, string </p><p>5, Object</p><p>6, Object [object Array]</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>  表达式 <span class="hljs-string">&quot;2&quot;</span>+<span class="hljs-number">3</span>+<span class="hljs-number">4</span> 的值为<br><span class="hljs-number">2.</span>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;5&#x27;</span> + <span class="hljs-number">3</span>, <span class="hljs-number">5</span> + <span class="hljs-string">&#x27;3&#x27;</span>)<br><span class="hljs-number">3.</span>  <span class="hljs-keyword">var</span> a=<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;111办2公室66&#x27;</span>); <span class="hljs-title function_">alert</span>(a);<br><span class="hljs-number">4.</span>  [<span class="hljs-string">&quot;0x1&quot;</span>, <span class="hljs-string">&quot;0x2&quot;</span>, <span class="hljs-string">&quot;0x3&quot;</span>].<span class="hljs-title function_">map</span>(<span class="hljs-built_in">parseInt</span>) 的结果<br><span class="hljs-number">5.</span>  在js中执行 <span class="hljs-number">1</span>+<span class="hljs-string">&#x27;1&#x27;</span>的结果是？<br><span class="hljs-number">6.</span>  在js中执行 <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;77&#x27;</span>,<span class="hljs-number">40</span>)的结果是?<br></code></pre></td></tr></table></figure><p>注：</p><p>1，234 - 在第一个字符串‘2’与数组3拼接的时候就已经变成字符串了，然后再拼接数字4（拼接而不是计算）</p><p>2，53，53，这哥俩都是字符串类型</p><p>3，111 parseInt() 函数可解析一个字符串，并返回一个整数。<br>当参数 radix 的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。<br>当忽略参数 radix , JavaScript 默认数字的基数如下:</p><ul><li>如果 string 以 “0x” 开头，parseInt() 会把 string 的其余部分解析为十六进制的整数。</li><li>如果 string 以 0 开头，那么 ECMAScript v3 允许 parseInt() 的一个实现把其后的字符解析为八进制或十六进制的数字。</li><li>如果 string 以 1 ~ 9 的数字开头，parseInt() 将把它解析为十进制的整数。</li></ul><p>4， [1, NaN, 0]</p><p>5, 11</p><p>6, NaN</p><h4 id="逻辑判断-1"><a href="#逻辑判断-1" class="headerlink" title="逻辑判断"></a>逻辑判断</h4><ol><li>请给出 [5&lt;6&lt;3,3&lt;2&lt;4] 代码的运行结果</li><li>(2&lt;3)||(3&lt;2) 表达式将返回值为</li><li>console.log(true||false&amp;&amp;false, true&amp;&amp;false||true)的输出结果是？<br>注<br>1, <del>[true, false]</del>. [true, true] 没搞懂，欢迎留言</li></ol><p>2, true</p><p>3, true true    &amp;&amp; 一假全假    || 一真全真</p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><ol><li>1 + - + + + - + 1 的结果是  &#x2F;&#x2F; 2 负负得正</li><li>[ ‘a’, ,’b’, ,].length 的结果是 &#x2F;&#x2F; 4</li></ol><h2 id="程序题"><a href="#程序题" class="headerlink" title="程序题"></a>程序题</h2><h3 id="JS基础-2"><a href="#JS基础-2" class="headerlink" title="JS基础"></a>JS基础</h3><ol><li>下面两个程序的输出结果分别是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// case 1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showCase</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">switch</span>(value) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case A&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case B&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">undefined</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case undefined&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case default&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title function_">showCase</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;A&#x27;</span>));<br><br><span class="hljs-comment">// case 2</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showCase</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">switch</span>(value) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case A&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case B&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">undefined</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case undefined&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Case default&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title function_">showCase</span>(<span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;A&#x27;</span>));<br></code></pre></td></tr></table></figure><p>注：**’Case default’，   ‘Case A’**</p><ol start="2"><li>p标签的的内容会显示什么？</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> y = <span class="hljs-string">&quot;10&quot;</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-title class_">Boolean</span>(x == y);</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：<strong>true</strong></p><ol start="3"><li>document.write的结果会是什么？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">funcA</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">var</span> temp = <span class="hljs-number">4</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">funcB</span>(<span class="hljs-params">y</span>)&#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>( ++x + y + (temp--));<br>    &#125;<br><br>    <span class="hljs-title function_">funcB</span>(<span class="hljs-number">5</span>);<br>&#125;<br><br><span class="hljs-title function_">funcA</span>(<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>16</strong></p><ol start="4"><li>alert的结果会是多少</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> varArr = <span class="hljs-keyword">function</span>(<span class="hljs-params">i,j,str</span>) &#123;  <br>    <span class="hljs-keyword">return</span> j == <span class="hljs-number">0</span> ? str : <span class="hljs-title function_">varArr</span>(i,--j,(str+= <span class="hljs-string">&quot; &quot;</span> + i[j]));<br>&#125;<br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;orange&#x27;</span>,<span class="hljs-string">&#x27;peach&#x27;</span>,<span class="hljs-string">&#x27;lime&#x27;</span>);<br><span class="hljs-keyword">var</span> str = <span class="hljs-title function_">varArr</span>(arr,arr.<span class="hljs-property">length</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-title function_">alert</span>(str);<br></code></pre></td></tr></table></figure><p>注：<strong>lime peach orange apple</strong></p><ol start="5"><li>下面程序的输出结果是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greetingMaker</span>(<span class="hljs-params">greeting</span>) &#123; <br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">addName</span>(<span class="hljs-params">name</span>) &#123;    <br>        greeting  = greeting.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>);<br>        <span class="hljs-keyword">return</span> greeting + <span class="hljs-string">&quot; &quot;</span> + name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> addName;<br>&#125;<br><br><span class="hljs-keyword">var</span> daytimeGreeting = <span class="hljs-title function_">greetingMaker</span>(<span class="hljs-string">&quot;Good Day to you&quot;</span>);<br><span class="hljs-title function_">alert</span>(<span class="hljs-title function_">daytimeGreeting</span>(<span class="hljs-string">&#x27;name&#x27;</span>)); <br></code></pre></td></tr></table></figure><p>注：<strong>you-to-Day-Good name</strong></p><ol start="6"><li>下面程序的输出结果是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">GetNum</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-keyword">var</span> regEx = <span class="hljs-regexp">/[^\d]/g</span>; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">replace</span>(regEx, <span class="hljs-string">&#x27;&#x27;</span>); <br>&#125;;<br><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;a1b2c3&quot;</span>;<br>str = str.<span class="hljs-title class_">GetNum</span>();<br><span class="hljs-title function_">alert</span>(str);<br></code></pre></td></tr></table></figure><p>注：<strong>123</strong></p><ol start="7"><li>下面程序的输出结果是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;2&quot;</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>12</strong></p><ol start="8"><li>下面程序的输出结果是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;我非常喜欢编程&quot;</span>;<br>str.<span class="hljs-property">length</span> = <span class="hljs-number">3</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br></code></pre></td></tr></table></figure><p>注：<strong>我非常喜欢编程</strong>  string的length无法修改</p><ol start="9"><li>下面程序的输出结果是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> number = <span class="hljs-number">0</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number++);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(++number);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number);<br></code></pre></td></tr></table></figure><p>注：<strong>0 2 2</strong></p><ol start="10"><li>下面程序的输出结果是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">nums</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">if</span> (a &gt; b)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a is bigger&#x27;</span>)<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b is bigger&#x27;</span>)<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">nums</span>(<span class="hljs-number">4</span>, <span class="hljs-number">2</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">nums</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>注：<strong>简单比大小</strong></p><ol start="11"><li>下面程序输出结果是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">side</span>(<span class="hljs-params">arr</span>) &#123;<br>    arr[<span class="hljs-number">0</span>] = arr[<span class="hljs-number">2</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">a, b, c = <span class="hljs-number">3</span></span>) &#123;<br>    c = <span class="hljs-number">10</span>;<br>    <span class="hljs-title function_">side</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + b + c);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>    c = <span class="hljs-number">10</span>;<br>    <span class="hljs-title function_">side</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + b + c);<br>&#125;<br><span class="hljs-title function_">func1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-title function_">func2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>12 21</strong> 大佬们解答下</p><ol start="12"><li>下面代码的输出结果是什么？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">var</span> c = <span class="hljs-number">3</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a == b);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a === b);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b === c);<br></code></pre></td></tr></table></figure><p>注：<strong>true false false</strong> 大佬们解答下</p><ol start="13"><li>执行下列语句后，a.length的值为？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [];<br>a.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>a.<span class="hljs-title function_">shift</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>a.<span class="hljs-title function_">concat</span>([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);<br>a.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>7</strong>  shift()移除数组的第一项，没有参数   concat()方法不会更改现有数组，而是返回一个新数组</p><ol start="14"><li>下面这几段代码分别输出结果是多少？为什么？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123;&#125;, b = <span class="hljs-string">&#x27;123&#x27;</span>, c = <span class="hljs-number">123</span>;<br>a[b] = <span class="hljs-string">&#x27;b&#x27;</span>;<br>a[c] = <span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[b]);<br><span class="hljs-comment">// example 2</span><br><span class="hljs-keyword">var</span> a = &#123;&#125;, b = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;123&#x27;</span>), c = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;123&#x27;</span>);<br>a[b] = <span class="hljs-string">&#x27;b&#x27;</span>;<br>a[c] = <span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[b]);<br><span class="hljs-comment">// example 3</span><br><span class="hljs-keyword">var</span> a = &#123;&#125;, b = &#123;<span class="hljs-attr">key</span>:<span class="hljs-string">&#x27;123&#x27;</span>&#125;, c = &#123;<span class="hljs-attr">key</span>:<span class="hljs-string">&#x27;456&#x27;</span>&#125;;<br>a[b] = <span class="hljs-string">&#x27;b&#x27;</span>;<br>a[c] = <span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[b]);<br></code></pre></td></tr></table></figure><p>注：<strong>c b c</strong></p><ol start="15"><li>下面每项的返回值是什么？为什么？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span><br><span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> == <span class="hljs-number">0.3</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">NaN</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Function</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Object</span><br><span class="hljs-keyword">typeof</span> &#123;&#125;<br><span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span><br><span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">1</span><br><span class="hljs-title class_">Function</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span><br><span class="hljs-title class_">Object</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span><br></code></pre></td></tr></table></figure><p>注：<strong>true  false number function function object a1 NaN true true</strong></p><ol start="16"><li>下面程序的输出结果是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = []<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    array.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> i)<br>&#125;<br><span class="hljs-keyword">var</span> newArray = array.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> <span class="hljs-title function_">el</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArray)<br></code></pre></td></tr></table></figure><p>注：<strong>3 3 3</strong></p><ol start="17"><li>下面程序的输出结果是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">m, n</span>) &#123;<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">function</span> (<span class="hljs-params">l</span>) &#123;<br>            <span class="hljs-keyword">return</span> l &lt;= m ? l * <span class="hljs-title function_">b</span>(l + <span class="hljs-number">1</span>) : <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">b</span>(m - n + <span class="hljs-number">1</span>);<br>    &#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">a</span>(<span class="hljs-number">4</span>, <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p>注：<strong>12</strong></p><ol start="18"><li>下面程序的输出结果是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span> == <span class="hljs-keyword">typeof</span> <span class="hljs-variable constant_">NULL</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125; == <span class="hljs-keyword">typeof</span> <span class="hljs-keyword">class</span> &#123;&#125;);<br></code></pre></td></tr></table></figure><p>注：<strong>false true</strong> NULL是全大写</p><ol start="19"><li>执行后a和b.age的值分别为</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> b = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">11</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">x,y</span>) &#123;<br>    --y.<span class="hljs-property">age</span>;<br>    <span class="hljs-keyword">return</span> --x;<br>&#125;<br><span class="hljs-title function_">fn</span>(a,b)<br></code></pre></td></tr></table></figure><p>注：<strong>10 10</strong></p><ol start="20"><li>下面程序的执行结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> number = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">var</span> numberFactorial = (<span class="hljs-keyword">function</span> (<span class="hljs-params">number</span>)&#123;<br>    <span class="hljs-keyword">return</span> (number === <span class="hljs-number">0</span>)? <span class="hljs-number">1</span>: number* <span class="hljs-title function_">factorial</span>(number-<span class="hljs-number">1</span>)<br>&#125;)(number)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(numberFactorial)<br></code></pre></td></tr></table></figure><p>注：****</p><ol start="21"><li>下面程序的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = []<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    array.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> i)<br>&#125;<br><span class="hljs-keyword">var</span> newArray = array.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> <span class="hljs-title function_">el</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArray)<br></code></pre></td></tr></table></figure><p>注：**[3 3 3]**</p><ol start="22"><li>下面程序的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addToList</span>(<span class="hljs-params">item, list</span>) &#123;<br>    <span class="hljs-keyword">return</span> list.<span class="hljs-title function_">push</span>(item)<br>&#125;<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">addToList</span>(<span class="hljs-string">&quot;nowcoder&quot;</span>, [<span class="hljs-string">&quot;hello&quot;</span>])<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br></code></pre></td></tr></table></figure><p>注：<strong>2</strong> push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。它会改变数组长度。</p><ol start="23"><li>下面程序的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">first</span> = (<span class="hljs-params"></span>) =&gt; &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;first&#x27;</span>); <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">second</span> = (<span class="hljs-params"></span>) =&gt; &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;second&#x27;</span>); <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">first</span>() &amp;&amp; <span class="hljs-title function_">second</span>() );<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">second</span>() || <span class="hljs-title function_">first</span>() );<br></code></pre></td></tr></table></figure><p>注：<strong>false true</strong>  逻辑并与非的关系</p><ol start="24"><li>下面代码的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s=<span class="hljs-string">&#x27;12ab3cd&#x27;</span>, arr=s.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/\d/</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">3</span>],arr[<span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><p>注：**’ab’ undefind**  正则匹配数字，以数组为切割点数组内容[‘’, ‘’, ‘ab’, ‘cd’]</p><ol start="25"><li>下面程序的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAge</span>(<span class="hljs-params">...args</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> args);<br>&#125;<br><br><span class="hljs-title function_">getAge</span>(<span class="hljs-number">21</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>object</strong></p><ol start="26"><li>下面程序的输出结果是:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr.<span class="hljs-title function_">push</span>(arr.<span class="hljs-title function_">shift</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">1</span>],arr[<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p>注：<strong>2 1</strong>  数组[2,3,1] shift删除第一个元素，并返回删除的第一个元素值，改变数组长度</p><h3 id="JS深入-2"><a href="#JS深入-2" class="headerlink" title="JS深入"></a>JS深入</h3><h4 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h4><p>题目解析：<a href="https://juejin.cn/post/7023944134561890318" title="https://juejin.cn/post/7023944134561890318">this指向题目解析及扩展</a></p><ol><li>下列程序的输出结果是多少？为什么？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">fun</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">var</span> fun = obj.<span class="hljs-property">fun</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( obj.<span class="hljs-title function_">fun</span>(), <span class="hljs-title function_">fun</span>() );<br></code></pre></td></tr></table></figure><p>注：<strong>3 1</strong> 普通函数谁调用，this指向谁</p><ol start="2"><li>下列程序的输出结果是多少？你能理清楚test函数的this指向吗？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span>;<br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123; <br>    a = <span class="hljs-number">0</span>; <br>    <span class="hljs-title function_">alert</span>(a); <br>    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>); <br>    <span class="hljs-keyword">var</span> a;<br>    <span class="hljs-title function_">alert</span>(a); <br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title function_">test</span>();<br></code></pre></td></tr></table></figure><p>注：<strong>0 undefind 0</strong></p><ol start="3"><li>下列程序的输出结果是多少？为什么？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span> () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// 1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// 2</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// 3</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> f = fun.<span class="hljs-title function_">call</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;foo&#x27;</span>&#125;) <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">var</span> t1 = f.<span class="hljs-title function_">call</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;bar&#x27;</span>&#125;)()()<br><span class="hljs-keyword">var</span> t2 = <span class="hljs-title function_">f</span>().<span class="hljs-title function_">call</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;baz&#x27;</span>&#125;)()<br><span class="hljs-keyword">var</span> t3 = <span class="hljs-title function_">f</span>()().<span class="hljs-title function_">call</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;qux&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><p>注：<strong>foo foo foo</strong></p><ol start="4"><li>执行以下代码，输出结果分别是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj1 = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">foo</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">// log1</span><br>obj1.<span class="hljs-title function_">foo</span>()<br><span class="hljs-keyword">const</span> obj2 = obj1.<span class="hljs-property">foo</span><br><span class="hljs-comment">// log2</span><br><span class="hljs-title function_">obj2</span>()<br></code></pre></td></tr></table></figure><p>注：<strong>undefind undefind</strong> 箭头函数会默认帮我们绑定外层this的值(目前是window)，所以在箭头函数中this的值和外层的this是一样的</p><ol start="5"><li>下面程序的输出结果是什么？为什么？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Person</span> = (<span class="hljs-params">name=<span class="hljs-string">&quot;wang&quot;</span>,age=<span class="hljs-number">10</span></span>) =&gt; &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> +<span class="hljs-string">&#x27; is &#x27;</span>+ <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;years old&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;zhang&#x27;</span>,<span class="hljs-number">11</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br></code></pre></td></tr></table></figure><p>注：<strong>语法错误，Person是箭头函数，没有constructor 无法通过new创建构造函数</strong></p><ol start="6"><li>请表述以下代码的执行结果和原因</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">getAge</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>;<br>  &#125;<br>&#125;;<br><span class="hljs-keyword">var</span> getAge = person.<span class="hljs-property">getAge</span><br><span class="hljs-title function_">getAge</span>()<br></code></pre></td></tr></table></figure><p>注：<strong>undefind</strong></p><ol start="7"><li>请按顺序写出打印结果，并说明原因。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;global&#x27;</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;local&#x27;</span>,<br>    <span class="hljs-attr">foo</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;foo&#x27;</span>;<br>    &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">window</span>)<br>&#125;;<br><span class="hljs-keyword">var</span> bar = <span class="hljs-keyword">new</span> obj.<span class="hljs-title function_">foo</span>();<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">name</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-property">name</span>);<br> <br><span class="hljs-keyword">var</span> bar3 = bar2 = bar;<br>bar2.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;foo2&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar3.<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>foo foo2 local</strong></p><ol start="8"><li>下面程序的执行结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<br>    <span class="hljs-attr">sayName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> wfunc = obj.<span class="hljs-property">sayName</span>;<br>obj.<span class="hljs-title function_">sayName</span>();<br><span class="hljs-title function_">wfunc</span>();<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;lisi&quot;</span>;<br>obj.<span class="hljs-title function_">sayName</span>();<br><span class="hljs-title function_">wfunc</span>();<br></code></pre></td></tr></table></figure><p>注：<strong>zhangsan undefind zhangsan lisi</strong></p><ol start="9"><li>下面程序的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;test&#x27;</span> <br><span class="hljs-keyword">var</span> a = &#123;    <br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ass&#x27;</span>,    <br>    <span class="hljs-attr">getName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;    <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;   <br>    &#125; <br>&#125; <br><span class="hljs-keyword">var</span> b = a.<span class="hljs-property">getName</span>; <br><span class="hljs-title function_">b</span>();<br></code></pre></td></tr></table></figure><p>注：<strong>test</strong></p><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><ol><li>下列程序的输出结果分别是多少？为什么？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> promiseA = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>promiseA. <span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br><span class="hljs-keyword">const</span> promiseB = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;b&#x27;</span>)<br>promiseB. <span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br>promiseB. <span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></td></tr></table></figure><p>注：<strong>a b b</strong></p><ol start="2"><li>下面程序的输出结果依次是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">const</span> P = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>()<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>    &#125;, <span class="hljs-number">0</span>)<br>&#125;)<br><br>P.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>2 5 1 3 4</strong> 同步任务异步任务，宏任务，微任务问题</p><ol start="3"><li>下面程序的输出结果是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-title function_">resolve</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>);<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>2 3 5 4 1</strong></p><ol start="4"><li>下面程序的输出结果是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>);<br>&#125;);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><p>注：<strong>1 3 2</strong> Promise没有更新状态，所以是pending</p><ol start="5"><li>下面程序的输出结果是:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    <span class="hljs-title function_">resolve</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2&#x27;</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;3&#x27;</span>)<br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;4&#x27;</span>)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;5&#x27;</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>1 2 5 3 4</strong></p><ol start="6"><li>下面程序的输出结果是:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;2&quot;</span>)<br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;1&quot;</span>)<br>&#125;,<span class="hljs-number">10</span>)<br>p1.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;3&quot;</span>)<br>&#125;,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>2 3 1</strong></p><ol start="7"><li>下面程序的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setTimeout&#x27;</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise1&#x27;</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise2&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>注：<strong>promise1 promise2 setTimeout</strong></p><ol start="8"><li>请表述以下代码的执行结果和原因</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>&#125;,<span class="hljs-number">0</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">executor</span>(<span class="hljs-params">resolve</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10000</span>; i++) &#123;<br>        i - <span class="hljs-number">9999</span> &amp;&amp; <span class="hljs-title function_">resolve</span>()<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>2 3 5 4 1</strong></p><ol start="9"><li>在网页中有两个div块，html代码如下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;outer&quot;</span>&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-keyword">var</span> outer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.outer&#x27;</span>);<br><span class="hljs-keyword">var</span> inner = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.inner&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">onClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;click&#x27;</span>);<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;timeout&#x27;</span>);<br>    &#125;, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise&#x27;</span>);<br>    &#125;);<br><br>    outer.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-random&#x27;</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());<br>&#125;<br><br>inner.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, onClick);<br>outer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, onClick);<br><br><span class="hljs-comment">//当点击class为inner的div块时，控制台依次输出结果是什么？ </span><br></code></pre></td></tr></table></figure><p>注：<strong>click promise click promise timeout timeout</strong></p><ol start="11"><li>下面程序的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>));<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(<br>   <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br> ).<span class="hljs-title function_">then</span>(<br>   <span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;c&#x27;</span>).<span class="hljs-title function_">then</span>(<br>     <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>       <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;d&#x27;</span>));<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;f&#x27;</span>);<br>       <span class="hljs-keyword">return</span> data;<br>     &#125;<br>   )<br> ).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data));<br></code></pre></td></tr></table></figure><p>注：<strong>b f c a d</strong></p><ol start="12"><li>下面程序的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;one&#x27;</span>); <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;two&#x27;</span>); &#125;, <span class="hljs-number">0</span>); <br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>()<br>       .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;three&#x27;</span>); &#125;)<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;four&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>one four three two</strong></p><h4 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h4><p>传送门: <a href="https://juejin.cn/post/7025939091560611848" title="https://juejin.cn/post/7025939091560611848">原型与原型链题目解析</a></p><ol><li>下面程序的输出结果依次是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn1</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">if</span>(name)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>&#125;<br><span class="hljs-title class_">Fn1</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;jack&quot;</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn1</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a:&#x27;</span>, a.<span class="hljs-property">name</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn2</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><span class="hljs-title class_">Fn2</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;jack&quot;</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn2</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b:&#x27;</span>, b.<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>jack  undefind</strong>  原型查询规则，现在自身属性找，如果没有找到再往上一级找</p><ol start="2"><li>下面程序的输出结果是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Foo</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    <span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">increment</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        ++x;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>    &#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Foo</span>;<br>&#125;)();<br> <br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br>a.<span class="hljs-title function_">increment</span>();<br>a.<span class="hljs-title function_">increment</span>();<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br>a.<span class="hljs-title function_">increment</span>();<br></code></pre></td></tr></table></figure><ol start="3"><li>下面程序的输出结果是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Jay&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Tom&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Michael&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b)<br></code></pre></td></tr></table></figure><p>注：<strong>Tom Tom  Michael</strong></p><ol start="4"><li>请表述以下代码的执行结果和原因</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span>&#123;&#125;<br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>()<br><span class="hljs-keyword">const</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>()<br>a.<span class="hljs-property">__proto__</span><br>b.<span class="hljs-property">__proto__</span><br>B. __proto__<br>B. prototype.<span class="hljs-property">__proto__</span><br>b.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span><br></code></pre></td></tr></table></figure><p>注：</p><ol start="5"><li>请表述以下代码的执行结果和原因</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;           <br>    getName = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <br>        <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span>)); <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);               <br>    &#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>; <br>&#125;<br>test.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <br>     <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>), <span class="hljs-number">0</span>); <br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);               <br>&#125;;<br>test.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;    <br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>); <br>&#125;;       <br><span class="hljs-keyword">var</span> getName = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>);             <br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6</span>); <br>&#125;      <br>      <br>test.<span class="hljs-title function_">getName</span>(); <br><span class="hljs-title function_">getName</span>(); <br><span class="hljs-title function_">test</span>().<span class="hljs-title function_">getName</span>(); <br><span class="hljs-title function_">getName</span>();  <br><span class="hljs-keyword">new</span> test.<span class="hljs-title function_">getName</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title function_">test</span>().<span class="hljs-title function_">getName</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">test</span>().<span class="hljs-title function_">getName</span>();<br></code></pre></td></tr></table></figure><ol start="6"><li>请表述以下代码的执行结果和原因</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> tmp = &#123;&#125;;<br><span class="hljs-keyword">var</span> A = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;;<br>A. prototype = tmp;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<br>A. prototype = &#123;&#125;;<br><br><span class="hljs-keyword">var</span> b = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(tmp);<br>b.<span class="hljs-property">constructor</span> = A. constructor;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a <span class="hljs-keyword">instanceof</span> A);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b <span class="hljs-keyword">instanceof</span> A);<br></code></pre></td></tr></table></figure><ol start="7"><li>下面程序的执行结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">z</span> = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(obj.<span class="hljs-property">z</span>)<br>obj.<span class="hljs-property">z</span> = <span class="hljs-number">10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(obj.<span class="hljs-property">z</span>);<br><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">z</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(obj.<span class="hljs-property">z</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>3 10 3</strong></p><ol start="8"><li>下面程序的执行结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Book</span> = &#123;<br>  <span class="hljs-attr">price</span>: <span class="hljs-number">32</span><br>&#125;<br><span class="hljs-keyword">const</span> book = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Book</span>);<br>book.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;Math&#x27;</span>;<br><span class="hljs-keyword">delete</span> book.<span class="hljs-property">price</span>;<br><span class="hljs-keyword">delete</span> book.<span class="hljs-property">type</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(book.<span class="hljs-property">price</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(book.<span class="hljs-property">type</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>32 undefind</strong>  在函数作用域外，无法删除函数的私有属性</p><h4 id="作用域与预编译"><a href="#作用域与预编译" class="headerlink" title="作用域与预编译"></a>作用域与预编译</h4><ol><li>下面的程序会报错吗？如果不会，输出结果分别是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age);<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Tom&quot;</span>;<br>    <span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span>;<br>&#125; <br><span class="hljs-title function_">sayHello</span>();<br></code></pre></td></tr></table></figure><p>注：<strong>报错</strong> let，const没有声明提升，会暂存死区</p><ol start="2"><li>下面的程序i的打印结果分别是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>注：<strong>3 3 3， 1 2 3</strong> var存在变量提示生成了全局变量i</p><ol start="3"><li>下面程序的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br><span class="hljs-keyword">let</span> b = <span class="hljs-string">&#x27;b&#x27;</span>;<br></code></pre></td></tr></table></figure><p>注：<strong>undefind 报错</strong></p><ol start="4"><li>下面程序的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = <span class="hljs-string">&quot;Hello&quot;</span>;<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> bar = <span class="hljs-string">&quot; World&quot;</span>;<br>    <span class="hljs-title function_">alert</span>(foo + bar);<br>&#125;)();<br><span class="hljs-title function_">alert</span>(foo + bar);<br></code></pre></td></tr></table></figure><p>注：<strong>Hellow World 第二次alert报错</strong></p><ol start="5"><li>下面程序的输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>    a = <span class="hljs-number">5</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">a</span>)<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>&#125;)()<br></code></pre></td></tr></table></figure><p>注：<strong>undefind 10 20</strong></p><ol start="6"><li>下面代码的输出结果是:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">runFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> a = <span class="hljs-number">20</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;inside&#x27;</span>, a)<br>&#125;<br><span class="hljs-title function_">runFunction</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;outside&#x27;</span>, a)<br></code></pre></td></tr></table></figure><p>注：<strong>20 10</strong></p><ol start="7"><li>请描述打印结果并说明原因</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Jay&#x27;</span><br><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Wang&#x27;</span>,<br>    <span class="hljs-attr">pro</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Michael&#x27;</span>,<br>        <span class="hljs-attr">getName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">pro</span>.<span class="hljs-property">getName</span>)<br><span class="hljs-keyword">var</span> people = person.<span class="hljs-property">pro</span>.<span class="hljs-property">getName</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">people</span>())<br></code></pre></td></tr></table></figure><p>注：<strong>Michael Jay</strong></p><ol start="8"><li>下面程序的结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> elements = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;li&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;elements.<span class="hljs-property">length</span>;i++)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    elements[i].<span class="hljs-property">onclick</span> =<span class="hljs-keyword">function</span>(<span class="hljs-params"> </span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">alert</span>(i); </span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注：<strong>都是4</strong></p><ol start="9"><li>下面程序的输出结果是</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">compute</span>(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">var</span> compute = <span class="hljs-keyword">function</span>(<span class="hljs-params">A,B</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(A * B) ;<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compute</span>(<span class="hljs-params">A,B</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(A + B);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compute</span>(<span class="hljs-params">A,B</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>((A + B)*<span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-title function_">compute</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>注：<strong>220 24</strong> var声明的函数与声明变量相同，然而 function声明会在词法分析时把方法提前</p><ol start="10"><li>下面程序的执行结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">meili</span>()<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">meili</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;meili&quot;</span>)<br>&#125;<br><span class="hljs-title function_">mogu</span>()<br><span class="hljs-keyword">var</span> mogu = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;mogu&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>注：<strong>meili 报错mogu undefined</strong></p><ol start="11"><li>下面两个代码片段输出结果有什么区别？为什么？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 片段1</span><br><span class="hljs-title function_">check</span>(<span class="hljs-string">&#x27;first&#x27;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">ars</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ars);<br>&#125;<br><span class="hljs-comment">// 片段2</span><br><span class="hljs-title function_">check</span>(<span class="hljs-string">&#x27;second&#x27;</span>);<br><span class="hljs-keyword">var</span> check= <span class="hljs-keyword">function</span>(<span class="hljs-params">ars</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ars);<br>&#125;<br></code></pre></td></tr></table></figure><p>注：<strong>first srcond</strong></p><h3 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ol><li>下面代码的输出结果是？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> student = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ZhangSan&#x27;</span>&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(student, <span class="hljs-string">&#x27;age&#x27;</span>, &#123;<span class="hljs-attr">value</span>: <span class="hljs-number">22</span>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(student)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(student))<br></code></pre></td></tr></table></figure><p>注：</p><h4 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h4><ol><li>下列程序的输出结果是多少？为什么？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> * <span class="hljs-title function_">cb</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(x); i &lt;= y; i++) &#123;<br>        <span class="hljs-keyword">yield</span> i;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-title function_">cb</span>(<span class="hljs-number">6</span>, <span class="hljs-number">9</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">next</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">next</span>());<br></code></pre></td></tr></table></figure><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><ol><li>下面程序的输出结果是：</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span> &#123;<br>  console.log(<span class="hljs-keyword">typeof</span> args);<br>&#125;<br>fn(<span class="hljs-number">21</span>);<br></code></pre></td></tr></table></figure><p>注：把参数转成了数组，而数组又属于对象，输入 <strong>object</strong></p><h4 id="promise-1"><a href="#promise-1" class="headerlink" title="promise"></a>promise</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-number">0</span>)<br>       .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e)<br>       .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e))<br></code></pre></td></tr></table></figure><p>注：<strong>返回失败状态的promise</strong></p><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><ol><li>请写出下面ES6代码编译后所生成的ES5代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>     <span class="hljs-title function_">constructor</span> (name) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>     &#125;<br>     greet () &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hi, my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>     &#125;<br>     greetDelay (time) &#123;<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hi, my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>          &#125;, time);<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h4><ol><li>下面程序的输出结果是多少？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPersonInfo</span> (one, two, three) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(one)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(two)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(three)<br>&#125;<br><span class="hljs-keyword">const</span> person = <span class="hljs-string">&#x27;Lydia&#x27;</span><br><span class="hljs-keyword">const</span> age = <span class="hljs-number">21</span><br>getPersonInfo <span class="hljs-string">`<span class="hljs-subst">$&#123;person&#125;</span> is <span class="hljs-subst">$&#123;age&#125;</span> years old`</span><br></code></pre></td></tr></table></figure><p>注：</p><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><ol><li>请写出index里面的输出结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// module.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; <span class="hljs-string">&quot;Hello world&quot;</span> <span class="hljs-comment">// 默认暴露</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;nowcoder&quot;</span> <span class="hljs-comment">// 变量暴露</span><br><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> data <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./module&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br></code></pre></td></tr></table></figure><p>注：<strong>Hellow world</strong></p><ol start="2"><li>有a.js和b.js两个文件，请写出b文件中代码的输出</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// a.js</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> b = &#123;&#125;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;    <br>a = <span class="hljs-number">2</span>    <br>b.<span class="hljs-property">b</span> = <span class="hljs-number">2</span><br>&#125;, <span class="hljs-number">100</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; a, b &#125;<br><br><span class="hljs-comment">// b.js</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">a</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">b</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;    <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">a</span>)    <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">b</span>)<br>&#125;, <span class="hljs-number">500</span>)<br></code></pre></td></tr></table></figure><p>注：<strong>2 {b:2} 2 {b:2}</strong> 未确认答案</p><h3 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h3><ol><li>输出结果是：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><br>        content<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> $ = <span class="hljs-variable language_">document</span>.<span class="hljs-property">querySelector</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">document</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> box1 = $(<span class="hljs-string">&#x27;#box1&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> box2 = $(<span class="hljs-string">&#x27;#box2&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">box1.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span>&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;box1 true&#x27;</span>);</span><br><span class="language-javascript">&#125;, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">box1.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span>&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;box1 false&#x27;</span>);</span><br><span class="language-javascript">&#125;, <span class="hljs-literal">false</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">box2.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span>&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;box2 true&#x27;</span>);</span><br><span class="language-javascript">&#125;, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">box2.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span>&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;box2 false&#x27;</span>);</span><br><span class="language-javascript">&#125;, <span class="hljs-literal">false</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>输出结果是：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"> value </span>) &#123;<br>        <span class="hljs-title function_">alert</span>( value );<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"> value </span>) &#123;<br>        <span class="hljs-title function_">fn1</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> callbacks = $.<span class="hljs-title class_">Callbacks</span>();<br>    callbacks.<span class="hljs-title function_">add</span>( fn1 ); <br>    callbacks.<span class="hljs-title function_">fire</span>( <span class="hljs-string">&quot;B&quot;</span> );<br>    callbacks.<span class="hljs-title function_">add</span>( fn2 ); <br>    callbacks.<span class="hljs-title function_">fire</span>( <span class="hljs-string">&quot;C&quot;</span> );<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>实现在p元素后添加“Hello World!”，则横线处应使用的方法为( )？</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/jquery/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&quot;&lt;b&gt;Hello World!&lt;/b&gt;&quot;</span>).<span class="hljs-title function_">______</span>(<span class="hljs-string">&quot;p&quot;</span>);</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is another paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>在每个p元素的结尾添加内容<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>输出结果是：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><br>    content<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> $ = <span class="hljs-variable language_">document</span>.<span class="hljs-property">querySelector</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">document</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> box1 = $(<span class="hljs-string">&#x27;#box1&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> box2 = $(<span class="hljs-string">&#x27;#box2&#x27;</span>);</span><br><span class="language-javascript">box1.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;box1 true&#x27;</span>);</span><br><span class="language-javascript">&#125;, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">box1.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;box1 false&#x27;</span>);</span><br><span class="language-javascript">&#125;, <span class="hljs-literal">false</span>);</span><br><span class="language-javascript">box2.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;box2 true&#x27;</span>);</span><br><span class="language-javascript">&#125;, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">box2.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;box2 false&#x27;</span>);</span><br><span class="language-javascript">&#125;, <span class="hljs-literal">false</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>文章参考自 <strong>战场小包</strong>  <a href="https://juejin.cn/post/7023271065392513038#heading-42">原文地址点这～</a> 侵删～</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue3+vite5 构建多页面多项目开发及打包</title>
    <link href="/2024/01/23/vite-multi-project/"/>
    <url>/2024/01/23/vite-multi-project/</url>
    
    <content type="html"><![CDATA[<p>项目背景：有多个UI及布局都相同的项目，但是拆成多个项目开发太乱后期不好维护。所以想把多个项目整个到一个项目中，抽离公共的组件，方法等。</p><p>基于技术栈：<font bgcolor='green' size=3 face="黑体">vue3 + vite5 + element-plus+ esint + prettier + stylelint + husky + lint-stage + commitlint</font></p><h4 id="1-项目目标"><a href="#1-项目目标" class="headerlink" title="1. 项目目标"></a>1. 项目目标</h4><ul><li>🍀 支持打包指定子页面，打包后的文件夹：各页面相互独立（各子页面解耦，避免相互影响）</li><li>🍀 支持启动指定子页面（常规的多页面项目，启动后需要手动拼接页面地址，或者在根目录做一个重定向的页面，总之调试非常不便）</li><li>🍀 支持指令化新建页面（手动创建页面太麻烦，每次都得复制一份干净的文件夹）</li><li>🍀 自由选择创建<font bgcolor='green'>ts</font>页面 &#x2F; <font bgcolor='green'>js</font>页面（对于一些重要的页面可以使用ts提高规范性，一些简单的页面则使用js提高开发效率）</li></ul><h4 id="2-本文将从以下几个方面逐步讲解："><a href="#2-本文将从以下几个方面逐步讲解：" class="headerlink" title="2. 本文将从以下几个方面逐步讲解："></a>2. 本文将从以下几个方面逐步讲解：</h4><ul><li>项目目录结构</li><li>新建项目</li><li>安装依赖及一些基础插件</li><li>vite配置项修改</li><li>ts配置</li><li>多页面入口配置</li><li>多页面打包配置</li><li>指令化新建子页面（*重点）</li><li>多页面架构改造（*重点）</li><li>完善项目架构</li></ul><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="一、-项目目录结构"><a href="#一、-项目目录结构" class="headerlink" title="一、 项目目录结构"></a>一、 项目目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── README.md <br>├── .husky   //git hook钩子<br>│   ├── commit-msg //规范 commit message 信息<br>│   └── verify-commit-msg.mjs  //脚本：commitlint 替代方案<br>├── dist //打包输出目录<br>├── scripts //存放一些脚本<br>│   ├── template         //创建子页面的js模版<br>│   ├── template-ts      //创建子页面的ts模版<br>│   ├── index.mjs        //创建子页面的脚本<br>│   └── multiPages.json  //子页面描述说明集合文件<br>├── src <br>│   ├── arrets       //公共静态资源<br>│   ├── components   //公共组件<br>│   ├── store        //pinia 共享状态存储库<br>│   ├── utils        //公共方法<br>│   └── Projects     //多页面文件夹<br>├── types  //ts 声明文件<br>├── .env.development   //开发环境-环境变量<br>├── .env.production    //生产环境-环境变量<br>├── .eslintrc.cjs      //eslint 配置<br>├── .gitignore         //git 提交忽略文件<br>├── .prettierignore    //prettier 忽略文件<br>├── .prettierrc.js     //prettier 配置<br>├── .stylelintignore   //stylelint 忽略文件<br>├── .stylelintrc.js    //stylelint 配置<br>├── .pnpm-lock.yaml    //锁定项目于一份各个依赖稳定的版本信息<br>├── .stats.html        //chunck size 分析页面<br>├── tsconfig.json      //ts 配置<br>├── tsconfig.node.json //vite在node环境中的 ts 规则<br>├── vite.config.ts     //vite 配置<br>├── package.json<br></code></pre></td></tr></table></figure><h3 id="二、-新建项目"><a href="#二、-新建项目" class="headerlink" title="二、 新建项目"></a>二、 新建项目</h3><p>首先我们用命令行新建一个vite项目，不要使用模板创建，就创建一个基础模板就行，创建命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># npm 6.x</span><br>npm create vite\@latest vite-multi<br><br><span class="hljs-comment"># npm 7+, extra double-dash is needed:</span><br>npm create vite\@latest  vite-multi<br><br><span class="hljs-comment"># yarn</span><br>yarn create vite  vite-multi<br><br><span class="hljs-comment"># pnpm</span><br>pnpm create vite  vite-multi<br></code></pre></td></tr></table></figure><h3 id="三、-安装依赖及一些基础插件"><a href="#三、-安装依赖及一些基础插件" class="headerlink" title="三、 安装依赖及一些基础插件"></a>三、 安装依赖及一些基础插件</h3><p>新建项目后记得<font bgcolor='green'> npm i </font>安装依赖。然后我们先装一些基础的插件，例如vue-router等，方便后面调试，<font bgcolor='pink'> 这里可能没装全，大家根据报错提示自行安装即可 </font>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">//安装vue-router4<br>npm install vue-router\@next -S<br><br>//安装 sass<br>npm install sass -D<br><br>//安装 chalk（chalk是一个颜色的插件。可以通过chalk.blue(‘hello world’)来改变console打印的颜色）<br>npm install chalk@^4.1.2<br><br>//处理使用 node 模块代码飘红，例如 ‘找不到模块 “path“ 或其相对应的类型声明’<br>npm install @types/node --save-dev<br></code></pre></td></tr></table></figure><h3 id="四、-vite配置项修改"><a href="#四、-vite配置项修改" class="headerlink" title="四、 vite配置项修改"></a>四、 vite配置项修改</h3><p>对<font bgcolor='green'> vite.config.ts </font>进行调整，先做一些基础的配置，后面我们调通项目之后再丰富项目插件。</p><p>🍀 配置文件路径的别名，方便书写文件引入路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">resolve: &#123;<br>    <span class="hljs-built_in">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: path.join(__dirname, <span class="hljs-string">&#x27;./src&#x27;</span>),<br>      <span class="hljs-string">&#x27;@Project&#x27;</span>: path.join(__dirname, <span class="hljs-string">&#x27;./src/Project&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="五、-ts配置"><a href="#五、-ts配置" class="headerlink" title="五、 ts配置"></a>五、 ts配置</h3><p>项目根目录下找到 tsconfig.json 文件，它是是用来配置 TS 编译选项的。<br>以下是我使用的配置项，基本对每一项都做了解释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br><span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;esnext&quot;</span>, //用于指定 TS 最后编译出来的 ES 版本<br><span class="hljs-string">&quot;types&quot;</span>: [<span class="hljs-string">&quot;vite/client&quot;</span>],  //要包含的类型声明文件名列表<br><span class="hljs-string">&quot;useDefineForClassFields&quot;</span>: <span class="hljs-literal">true</span>,  //将 class 声明中的字段语义从 [[Set]] 变更到 [[Define]]<br><span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;esnext&quot;</span>,  // 设置编译后代码使用的模块化系统：commonjs | UMD | AMD | ES2020 | ESNext | System<br><span class="hljs-string">&quot;moduleResolution&quot;</span>: <span class="hljs-string">&quot;node&quot;</span>, // 模块解析策略，ts默认用node的解析策略，即相对的方式导入<br><span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span>,  //开启所有的严格检查<br><span class="hljs-string">&quot;jsx&quot;</span>: <span class="hljs-string">&quot;preserve&quot;</span>, //在 `.tsx`文件里支持JSX： `<span class="hljs-string">&quot;React&quot;</span>`或 `<span class="hljs-string">&quot;Preserve&quot;</span>`<br><span class="hljs-string">&quot;sourceMap&quot;</span>: <span class="hljs-literal">false</span>, // 生成目标文件的sourceMap文件<br><span class="hljs-string">&quot;resolveJsonModule&quot;</span>: <span class="hljs-literal">true</span>, //允许导入扩展名为“.json”的模块<br><span class="hljs-string">&quot;isolatedModules&quot;</span>: <span class="hljs-literal">true</span>,  //确保每个文件都可以在不依赖其他导入的情况下安全地进行传输<br><span class="hljs-string">&quot;esModuleInterop&quot;</span>: <span class="hljs-literal">true</span>,  //支持导入 CommonJs 模块<br><span class="hljs-string">&quot;lib&quot;</span>: [<span class="hljs-string">&quot;esnext&quot;</span>, <span class="hljs-string">&quot;dom&quot;</span>, <span class="hljs-string">&quot;ES2015&quot;</span>], //TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入<span class="hljs-string">&quot;ES2019.Array&quot;</span>,<br>// <span class="hljs-string">&quot;noLib&quot;</span>: <span class="hljs-literal">false</span>, //不包含默认的库文件（ lib.d.ts）<br><span class="hljs-string">&quot;skipLibCheck&quot;</span>: <span class="hljs-literal">true</span>, //忽略所有的声明文件（ *.d.ts）的类型检查<br><span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span>, // 允许编译器编译JS，JSX文件<br><span class="hljs-string">&quot;noEmit&quot;</span>: <span class="hljs-literal">true</span>, // 不输出文件,即编译后不会生成任何js文件<br><span class="hljs-string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="hljs-literal">true</span>, //允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。默认值：module === <span class="hljs-string">&quot;system&quot;</span> 或设置了 --esModuleInterop 且 module 不为 es2015 / esnext<br><span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;./&quot;</span>,   解析非相对模块的基地址，默认是当前目录<br><span class="hljs-string">&quot;paths&quot;</span>: &#123;  <br>  <span class="hljs-string">&quot;@/*&quot;</span>: [<span class="hljs-string">&quot;src/*&quot;</span>], //解决引入报错  找不到模块“@/xxxx” 或其相应的类型声明<br>  <span class="hljs-string">&quot;@Project&quot;</span>: [<span class="hljs-string">&quot;src/Project/*&quot;</span>]<br>&#125;<br>&#125;,<br><span class="hljs-string">&quot;include&quot;</span>: [<br><span class="hljs-string">&quot;scripts/**/*.ts&quot;</span>,<br><span class="hljs-string">&quot;src/**/*.ts&quot;</span>,<br><span class="hljs-string">&quot;src/**/*.js&quot;</span>,<br><span class="hljs-string">&quot;src/**/*.d.ts&quot;</span>,<br><span class="hljs-string">&quot;src/**/*.tsx&quot;</span>,<br><span class="hljs-string">&quot;src/**/*.vue&quot;</span>,<br><span class="hljs-string">&quot;scripts/index.mts&quot;</span>,<br><span class="hljs-string">&quot;scripts/template-ts/router/routes.ts&quot;</span>,<br><span class="hljs-string">&quot;scripts/template-ts/router/index.ts&quot;</span>,<br><span class="hljs-string">&quot;scripts/template-ts/main.ts&quot;</span>,<br><span class="hljs-string">&quot;src/env.d.ts&quot;</span>,<br><span class="hljs-string">&quot;src/global.d.ts&quot;</span><br>],<br><span class="hljs-string">&quot;exclude&quot;</span>: [<span class="hljs-string">&quot;vite.config.ts&quot;</span>],<br><span class="hljs-string">&quot;references&quot;</span>: [&#123; <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;./tsconfig.node.json&quot;</span> &#125;] //每个引用的`path`属性都可以指向到包含`tsconfig.json`文件的目录，或者直接指向到配置文件本身（名字是任意的）<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、-多页面入口配置"><a href="#六、-多页面入口配置" class="headerlink" title="六、 多页面入口配置"></a>六、 多页面入口配置</h3><p><font bgcolor='green'> <a href="https://cn.vitejs.dev/config/">vite</a> </font>使用的是 <a href="https://cn.rollupjs.org/introduction/">rollup</a> 的打包方式。</p><h4 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h4><p>想要将项目改造成多页面项目，我们可以自定义底层的 Rollup 打包配置，只需要指定多个 .html 文件作为入口点即可，此设置在<font bgcolor='green'> build.rollupOptions.input </font>配置项下。</p><p>首先我们现在 projects 文件夹下新建两个子页面 page1、page2 ，目录结构如下：</p><img src="/2024/01/23/vite-multi-project/code1.jpg" class="" title="This is an example image"><p>然后在<font bgcolor='green'> vite.config.ts </font>文件中指定这两个子页面的入口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">build: &#123;<br>rollupOptions: &#123;  //自定义底层的 Rollup 打包配置<br>  input: &#123;<br>    project1: resolve(__dirname, <span class="hljs-string">&#x27;src/projects/page1/index.html&#x27;</span>),<br>    project2: resolve(__dirname, <span class="hljs-string">&#x27;src/projects/page2/index.html&#x27;</span>)<br>  &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的是：<br><font bgcolor='green'> __dirname </font>占位符指的是<font bgcolor='green'> vite.config.js </font>文件所在的目录，即使修改了项目的根目录，它的值也不会变（后面我们将会修改项目的根目录）。</p><h4 id="2-动态生成多页面入口"><a href="#2-动态生成多页面入口" class="headerlink" title="2. 动态生成多页面入口"></a>2. 动态生成多页面入口</h4><p>因为我们要不断新建子页面，不可能每个子页面都手动去配置入口，所以可以获取到<font bgcolor='green'> &#x2F;projects </font>文件夹下文件名后，动态配置多页面入口。</p><p>fs 模块是 Node.js 官方提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求，这里我们用到了<font bgcolor='green'> fs.readdirSync </font>方法。<br><font bgcolor='green'> fs.readdirSync </font>方法同步返回一个包含“指定目录下所有文件的名称”的数组对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;fs&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getEntryPath</span> () &#123;<br>    <span class="hljs-keyword">const</span> map = &#123;&#125; <span class="hljs-comment">//最后生成的多页面配置项</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PAGE_PATH</span> = path.<span class="hljs-title function_">resolve</span>(\__dirname, <span class="hljs-string">&#x27;./src/Project&#x27;</span>)  <span class="hljs-comment">//指定要查询的目录</span><br>    <span class="hljs-keyword">const</span> entryFiles = fs.<span class="hljs-title function_">readdirSync</span>(<span class="hljs-variable constant_">PAGE_PATH</span>)   <span class="hljs-comment">//获取到指定目录下的所有文件名</span><br>    entryFiles.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">filePath</span> =&gt;</span> &#123;   <span class="hljs-comment">//遍历处理每个子页面的入口</span><br>        map[filePath] = path.<span class="hljs-title function_">resolve</span>(__dirname,<br>        <span class="hljs-string">`src/Project/<span class="hljs-subst">$&#123;filePath&#125;</span>/index.html`</span><br>        )<br>    &#125;)<br>      <span class="hljs-keyword">return</span> map<br>&#125;<br><br><span class="hljs-comment">// 自定义底层的 Rollup 打包配置</span><br><span class="hljs-attr">rollupOptions</span>: &#123;<br>  <span class="hljs-attr">input</span>: <span class="hljs-title function_">getEntryPath</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-配置重定向页面"><a href="#3-配置重定向页面" class="headerlink" title="3. 配置重定向页面"></a>3. 配置重定向页面</h4><p>配置完多页面入口后，我们可以启动项目看看效果。<font bgcolor='green'> npm run dev </font>启动项目：</p><p>你会发现什么都没有，因为此时项目根路径还是‘&#x2F;’，找不到可以作为入口的index.html文件，这时我们只能手动拼接上地址<font bgcolor='green'> &#x2F;src&#x2F;projects&#x2F;page1&#x2F; </font>，进入子项目的<font bgcolor='green'> index.html </font>文件</p><p>修改项目根目录下的<font bgcolor='green'> index.html(与vite.config.js同级) </font>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>重定向<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./src/projects/page1/index.html&quot;</span>&gt;</span>子页面1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./src/projects/page2/index.html&quot;</span>&gt;</span>子页面2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="七、-多页面打包配置"><a href="#七、-多页面打包配置" class="headerlink" title="七、 多页面打包配置"></a>七、 多页面打包配置</h3><p>build 选项指定多个入口之后，就可以进行多页面打包了。我们执行<font bgcolor='green'> npm run build </font>看看打包生成的<font bgcolor='green'> dist </font>文件夹结构（这是完成版的截图，初步配置打包不区分 js&#x2F;css&#x2F;png等文件夹）。</p><img src="/2024/01/23/vite-multi-project/code2.jpg" class="" title="This is an example image"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">build</span>: &#123;<br>  <span class="hljs-attr">rollupOptions</span>: &#123;<br>    <span class="hljs-attr">input</span>: 指定多页面入口,<br>    <span class="hljs-attr">output</span>: &#123;<br>      <span class="hljs-attr">assetFileNames</span>: <span class="hljs-string">&#x27;[ext]/[name]-[hash].[ext]&#x27;</span>, <span class="hljs-comment">//静态文件输出的文件夹名称</span><br>      <span class="hljs-attr">chunkFileNames</span>: <span class="hljs-string">&#x27;js/[name]-[hash].js&#x27;</span>,  <span class="hljs-comment">//chunk包输出的文件夹名称</span><br>      <span class="hljs-attr">entryFileNames</span>: <span class="hljs-string">&#x27;js/[name]-[hash].js&#x27;</span>,  <span class="hljs-comment">//入口文件输出的文件夹名称</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>占位符说明 &gt;&gt;&gt;</p><p><font bgcolor='green'> [extname] </font>：文件扩展名，包括前面的<font bgcolor='green'> . ,例如 .css </font>；<br><font bgcolor='green'> [ext] </font>：文件扩展名，不包括前面的<font bgcolor='green'> . ,例如 css </font>；<br><font bgcolor='green'> [name] </font>：文件名；<br><font bgcolor='green'> [hash] </font>：基于文件内容生成的哈希值，可以通过<font bgcolor='green'> [hash:10] </font>设置特定的哈希长度；</p><h3 id="八、-指令化新建子页面（-重点来了～-）"><a href="#八、-指令化新建子页面（-重点来了～-）" class="headerlink" title="八、 指令化新建子页面（ 重点来了～ ）"></a>八、 指令化新建子页面（<font bgcolor='pink'> 重点来了～ </font>）</h3><p>到这里其实已经改造出来了一个多页面项目脚手架。但是离我们都目标还相差甚远：</p><ul><li>🍀 不能指令化创建页面</li><li>🍀 不能单独启动指定的子项目</li><li>🍀 打包后所有子项目的静态文件都混淆在一起</li></ul><p>那么怎么解决这些问题呢？ 我们逐个剖析：</p><p>先来解决指令化新建页面的问题，既然要创建页面，就是要和文件打交道，所以我们还是要使用到 fs 文件系统模块。先来了解它的一下几个方法，我们之后会用到（这里只是大概对方法简单说明，具体使用自行查询）：</p><p>🔥 <font bgcolor='green'> fs.mkdirSync( path, options ) </font>方法用于同步创建目录，创建子页面主要就是使用这个方法。</p><p>🔥 <font bgcolor='green'> fs.readFile( filename, encoding, callback_function ) </font>方法用于异步读取指定文件中的内容。</p><p>🔥 <font bgcolor='green'> fs.writeFile( file, data, options, callback ) </font>方法用于异步读取指定文件中的内容。</p><p>🔥 <font bgcolor='green'> fs.existsSync( path ) </font>方法用于同步检测目录是否存在;</p><p>🔥 <font bgcolor='green'> fs.readdirSync( path, options ) </font>方法用于同步读取给定目录的内容。该方法返回一个数组，其中包含目录中的所有文件名或对象。</p><p>🔥 <font bgcolor='green'> fs.copyFileSync( src, dest, mode ) </font>方法用于将文件从源路径同步复制到目标路径。</p><ol><li><font bgcolor='green'> package.json </font>文件中添加以下指令，以执行创建子页面的脚本；</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    ...<br>    <span class="hljs-string">&quot;new:page&quot;</span>: <span class="hljs-string">&quot;node ./scripts/index.mjs&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>然后开发写创建子页面的脚本，第一步要先提示用户输入要创建的页面名称和描述，并验证输入的格式；</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//./scripts/index.mjs</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">log</span> = (<span class="hljs-params">message</span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">green</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;message&#125;</span>`</span>))<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">successLog</span> = (<span class="hljs-params">message</span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">blue</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;message&#125;</span>`</span>))<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">errorLog</span> = (<span class="hljs-params">error</span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">red</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;error&#125;</span>`</span>))<br><span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请输入要生成的&quot;页面名称:页面描述&quot;、会生成在 /src/projects 目录下&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="3"><li>使用<font bgcolor='green'> fs.existsSync </font>方法验证是否已存在同名页面；</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//process.stdin属性是流程模块的内置应用程序编程接口，用于侦听用户输入，它使用on()函数来监听事件。</span><br>process.<span class="hljs-property">stdin</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-keyword">async</span> (chunk) =&gt; &#123;<br><span class="hljs-comment">// 获取输入的信息</span><br><span class="hljs-keyword">const</span> content = <span class="hljs-title class_">String</span>(chunk).<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">toString</span>()<br><span class="hljs-keyword">const</span> inputSearch = content.<span class="hljs-title function_">search</span>(<span class="hljs-string">&#x27;:&#x27;</span>)<br><span class="hljs-keyword">if</span> (inputSearch == -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-title function_">errorLog</span>(<span class="hljs-string">&#x27;格式错误，请重新输入&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 拆分用户输入的名称和描述</span><br><span class="hljs-keyword">const</span> inputName = content.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">const</span> inputDesc = content.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">1</span>] || inputName<br><span class="hljs-keyword">const</span> isTs = process.<span class="hljs-property">env</span>.<span class="hljs-property">npm_config_ts</span><br><span class="hljs-title function_">successLog</span>(<span class="hljs-string">`将在 /src/Project 目录下创建 <span class="hljs-subst">$&#123;inputName&#125;</span> 文件夹`</span>)<br><span class="hljs-keyword">const</span> targetPath = <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./src/Project&#x27;</span>, inputName)<br><span class="hljs-comment">// 判断同名文件夹是否存在</span><br><span class="hljs-keyword">const</span> pageExists = fs.<span class="hljs-title function_">existsSync</span>(targetPath)<br><span class="hljs-keyword">if</span> (pageExists) &#123;<br>    <span class="hljs-title function_">errorLog</span>(<span class="hljs-string">&#x27;页面已经存在，请重新输入&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="4"><li>在同级<font bgcolor='green'> script </font>文件夹下，新建<font bgcolor='green'> multiPages.json </font>用于记录目前已有的页面名称，每次新建页面都会写入进去；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取multiPages.json文件内容，获取当前已有的页面集合</span><br><span class="hljs-keyword">await</span> fs.<span class="hljs-title function_">readFile</span>(<br>path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./scripts&#x27;</span>, <span class="hljs-string">&#x27;multiPages.json&#x27;</span>),<br><span class="hljs-string">&#x27;utf-8&#x27;</span>,<br><span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//获取老数据</span><br>  <span class="hljs-keyword">let</span> datas = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data)<br>  <span class="hljs-comment">//和老数据去重</span><br>  <span class="hljs-keyword">let</span> index = datas.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">ele</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> ele.<span class="hljs-property">chunk</span> == inputName<br>  &#125;)<br>  <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">//写入新页面的</span><br>    <span class="hljs-keyword">let</span> obj = &#123;<br>      <span class="hljs-attr">chunk</span>: inputName,<br>      <span class="hljs-attr">chunkName</span>: inputDesc<br>    &#125;<br>    datas.<span class="hljs-title function_">push</span>(obj)<br>    <span class="hljs-title function_">setFile</span>(datas)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 写入multiPages.json</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setFile</span>(<span class="hljs-params">datas</span>) &#123;<br><span class="hljs-comment">// 通过writeFile改变数据内容</span><br>fs.<span class="hljs-title function_">writeFile</span>(<br>  path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;./scripts&#x27;</span>, <span class="hljs-string">&#x27;multiPages.json&#x27;</span>),<br>  <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(datas),<br>  <span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err<br>    <span class="hljs-comment">// 在project中建立新的目录</span><br>    fs.<span class="hljs-title function_">mkdirSync</span>(targetPath)<br>    <span class="hljs-keyword">const</span> sourcePath = <span class="hljs-title function_">resolve</span>(<br>      isTs ? <span class="hljs-string">&#x27;./scripts/template-ts&#x27;</span> : <span class="hljs-string">&#x27;./scripts/template&#x27;</span><br>    )<br>    <span class="hljs-title function_">copyFile</span>(sourcePath, targetPath)<br>    process.<span class="hljs-property">stdin</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;end&#x27;</span>)<br>  &#125;<br>)<br>&#125;<br><br>...<br><br>process.<span class="hljs-property">stdin</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exit&#x27;</span>)<br>process.<span class="hljs-title function_">exit</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="5"><li>将新页面的信息写入<font bgcolor='green'> multiPages.json </font>文件后，在<font bgcolor='green'> projects </font>文件夹下复制我们提前创建好的模板页面。我这里创建了两个模版页面，分别是js和ts的模版，如果需要创建支持<font bgcolor='green'> TS </font>的子页面，创建命令为<font bgcolor='green'> npm run new:page –ts </font></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 判断文件夹是否存在，不存在创建一个</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">isExist</span> = (<span class="hljs-params">path</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!fs.<span class="hljs-title function_">existsSync</span>(path)) &#123;<br>        fs.<span class="hljs-title function_">mkdirSync</span>(path)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//递归复制模版文件夹内的文件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">copyFile</span> = (<span class="hljs-params">sourcePath, targetPath</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> sourceFile = fs.<span class="hljs-title function_">readdirSync</span>(sourcePath, &#123; <span class="hljs-attr">withFileTypes</span>: <span class="hljs-literal">true</span> &#125;)<br><br>sourceFile.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> newSourcePath = path.<span class="hljs-title function_">resolve</span>(sourcePath, file.<span class="hljs-property">name</span>)<br>    <span class="hljs-keyword">const</span> newTargetPath = path.<span class="hljs-title function_">resolve</span>(targetPath, file.<span class="hljs-property">name</span>)<br>    <span class="hljs-comment">//isDirectory() 判断这个文件是否是文件夹，是就继续递归复制其内容</span><br>        <span class="hljs-keyword">if</span> (file.<span class="hljs-title function_">isDirectory</span>()) &#123;<br>          <span class="hljs-title function_">isExist</span>(newTargetPath)<br>          <span class="hljs-title function_">copyFile</span>(newSourcePath, newTargetPath)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          fs.<span class="hljs-title function_">copyFileSync</span>(newSourcePath, newTargetPath)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="九、-多页面架构改造"><a href="#九、-多页面架构改造" class="headerlink" title="九、 多页面架构改造"></a>九、 多页面架构改造</h3><p>指定子页面可以在执行<font bgcolor='green'> npm run dev </font>命令时配置自定义环境变量。格式为<font bgcolor='green'> npm run dev –变量名&#x3D;值 </font>，例如我要单独启动 pageone 子页面：<font bgcolor='green'> npm run dev –page&#x3D;page1 </font>。关于<a href="https://www.w3cschool.cn/npmjs/npmjs-tfry3kmu.html">npm</a>环境变量的使用可以查看<a href="https://www.w3cschool.cn/npmjs/npmjs-tfry3kmu.html">传送门</a><br>如何启动后直接进入这个子页面呢？这时候我们就需要修改项目的根路径了：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">注意：将根路径修改到指定子页面目录下后，就只能单独启动/打包 指定的子页面了，无法打包全部的子页面。这么做有以下优缺点：<br>优点：打包后的子页面相互独立，可以直接启动指定的子页面；<br>缺点：无法一次性打包全部页面，需要配置重定向页面方便调试<br></code></pre></td></tr></table></figure><p>所以你可以根据需要决定是否要修改项目根目录，因为我考虑到页面是逐步新增的，需要一次性打包全部页面的情况很少，而且我认为打包后的子页面相互独立非常重要，避免出现一些意料之外的问题影响多个页面，所以我果断选择了每次都单独打包页面。</p><p>这里我把两种情况的处理都列出来：</p><h4 id="情况1：支持单页面打包和打包全部页面"><a href="#情况1：支持单页面打包和打包全部页面" class="headerlink" title="情况1：支持单页面打包和打包全部页面"></a>情况1：支持单页面打包和打包全部页面</h4><p>处理方式：</p><ol><li>多页面入口配置<br>使用说明：<font bgcolor='green'> npm run build </font>打包全部页面; <font bgcolor='green'> npm run build –page&#x3D;页面名称 </font>打包单页面；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//vite.config.ts</span><br><br><span class="hljs-comment">// 引入多页面配置文件</span><br><span class="hljs-keyword">const</span> project = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./scripts/multiPages.json&#x27;</span>)<br><span class="hljs-comment">// 获取npm run dev后缀 配置的环境变量</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">npm_config_page</span>:string =  process.<span class="hljs-property">env</span>.<span class="hljs-property">npm_config_page</span> || <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">let</span> filterProjects = []<br><span class="hljs-keyword">if</span> (npm_config_page) &#123;<br><span class="hljs-comment">//如果指定了单页面打包，过滤出这个页面的配置项</span><br>filterProjects = project.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">ele</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> ele.<span class="hljs-property">chunk</span>.<span class="hljs-title function_">toLowerCase</span>() === npm_config_page.<span class="hljs-title function_">toLowerCase</span>()<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`--------单独构建：<span class="hljs-subst">$&#123;filterProjects[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;chunkName&#x27;</span>]&#125;</span>--------`</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>filterProjects = project<br>&#125;<br><br><span class="hljs-comment">//多页面入口</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getEnterPages</span> = (<span class="hljs-params">p</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> pages = &#123;&#125;<br>p.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">ele</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> htmlUrl = path.<span class="hljs-title function_">resolve</span>(<br>  __dirname,<br>  <span class="hljs-string">`src/projects/<span class="hljs-subst">$&#123;ele.chunk&#125;</span>/index.html`</span><br>)<br>pages[ele.<span class="hljs-property">chunk</span>] = htmlUrl<br>&#125;)<br><span class="hljs-keyword">return</span> pages<br>&#125;<br><br><span class="hljs-comment">//入口配置</span><br><span class="hljs-attr">build</span>: &#123;<br><span class="hljs-attr">rollupOptions</span>: &#123;<br>  <span class="hljs-attr">input</span>: <span class="hljs-title function_">getEnterPages</span>(filterProjects),<br>  ...<br></code></pre></td></tr></table></figure><ol start="2"><li><p>项目根路径修改为<font bgcolor='green'> root: ‘.&#x2F;src&#x2F;projects&#x2F;‘ </font>，不修改其实也能实现，但是不改的话打包后dist文件夹层级太深；</p></li><li><p>修改打包的输出路径为:</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">build</span>: &#123;<br>  <span class="hljs-attr">outDir</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">`dist`</span>), <span class="hljs-comment">// 指定输出路径</span><br>...<br></code></pre></td></tr></table></figure><img src="/2024/01/23/vite-multi-project/code2.jpg" class="" title="This is an example image"><ol start="4"><li>修改 <code>envDir</code> 配置项，修改到项目根的路径，用于加载<code>.env</code> 环境变量文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">envDir</span>: path.<span class="hljs-title function_">resolve</span>(__dirname)<br></code></pre></td></tr></table></figure><h4 id="情况2：只支持单页面打包"><a href="#情况2：只支持单页面打包" class="headerlink" title="情况2：只支持单页面打包"></a>情况2：只支持单页面打包</h4><ol><li>多页面入口配置</li></ol><p>使用说明： npm run build –page&#x3D;页面名称 单独打包指定页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//vite.config.ts</span><br><span class="hljs-keyword">import</span> chalk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;chalk&#x27;</span><br><br><span class="hljs-comment">// 引入多页面配置文件</span><br><span class="hljs-keyword">const</span> project = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./scripts/multiPages.json&#x27;</span>)<br><span class="hljs-comment">// 获取npm run dev后缀 配置的环境变量</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">npm_config_page</span>:string =  process.<span class="hljs-property">env</span>.<span class="hljs-property">npm_config_page</span> || <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">// 命令行报错提示</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">errorLog</span> = (<span class="hljs-params">error</span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chalk.<span class="hljs-title function_">red</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;error&#125;</span>`</span>))<br><br><span class="hljs-comment">//获取指定的单页面入口</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getEnterPages</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!npm_config_page) <span class="hljs-title function_">errorLog</span>(<span class="hljs-string">&#x27;-------------------请在命令行后以 `--page=页面名称` 格式指定页面名称！-------------------&#x27;</span>)<br>    <span class="hljs-keyword">const</span> filterArr = project.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">chunk</span>.<span class="hljs-title function_">toLowerCase</span>() == npm_config_page.<span class="hljs-title function_">toLowerCase</span>())<br>    <span class="hljs-keyword">if</span> (!filterArr.<span class="hljs-property">length</span>)<br>    <span class="hljs-title function_">errorLog</span>(<span class="hljs-string">&#x27;-------------------不存在此页面，请检查页面名称！-------------------&#x27;</span>)<br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>        [npm_config_page] : path.<span class="hljs-title function_">resolve</span>(<br>          __dirname,<br>          <span class="hljs-string">`src/Project/<span class="hljs-subst">$&#123;npm_config_page&#125;</span>/index.html`</span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//入口配置</span><br><span class="hljs-attr">build</span>: &#123;<br>    <span class="hljs-attr">rollupOptions</span>: &#123;<br>      <span class="hljs-attr">input</span>: <span class="hljs-title function_">getEnterPages</span>(),<br>      ...<br><br></code></pre></td></tr></table></figure><ol start="2"><li>项目根路径修改到用户输入的单页面文件夹下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">root</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">`./src/Project/<span class="hljs-subst">$&#123;npm_config_page&#125;</span>`</span>)<br></code></pre></td></tr></table></figure><ol start="3"><li>修改打包的输出路径为：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">build</span>: &#123;<br>  <span class="hljs-attr">outDir</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">`dist/<span class="hljs-subst">$&#123; npm_config_page &#125;</span>`</span>) <span class="hljs-comment">// 指定输出路径</span><br>...<br></code></pre></td></tr></table></figure><ol start="4"><li>修改<font bgcolor='green'> envDir </font>配置项，修改到项目根的路径，用于加载.env 环境变量文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">envDir</span>: path.<span class="hljs-title function_">resolve</span>(__dirname)<br></code></pre></td></tr></table></figure><p>到这里，多页面架构已经基本改造完成了🎉🎉🎉</p><p>再做一些打包的优化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">build</span>: &#123;<br>    <span class="hljs-attr">assetsInlineLimit</span>: <span class="hljs-number">4096</span>, <span class="hljs-comment">//小于此阈值的导入或引用资源将内联为 base64 编码，以避免额外的 http 请求</span><br>    <span class="hljs-attr">emptyOutDir</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//Vite 会在构建时清空该目录</span><br>    <span class="hljs-attr">terserOptions</span>: &#123;<br>      <span class="hljs-attr">compress</span>: &#123;<br>        <span class="hljs-attr">keep_infinity</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 防止 Infinity 被压缩成 1/0，这可能会导致 Chrome 上的性能问题</span><br>        <span class="hljs-attr">drop_console</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 生产环境去除 console</span><br>        <span class="hljs-attr">drop_debugger</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 生产环境去除 debugger</span><br>      &#125;,<br>      <span class="hljs-attr">format</span>: &#123;<br>        <span class="hljs-attr">comments</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 删除注释</span><br>      &#125;,<br>    &#125;,<br>    <span class="hljs-attr">rollupOptions</span>: &#123;<br>      <span class="hljs-attr">input</span>: ...<br>      <span class="hljs-attr">output</span>: &#123;<br>        ...<br>        <span class="hljs-attr">compact</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">//压缩代码，删除换行符等</span><br>        <span class="hljs-attr">manualChunks</span>: <span class="hljs-function">(<span class="hljs-params">id: string</span>) =&gt;</span> &#123;  <span class="hljs-comment">//配置分包</span><br>          <span class="hljs-keyword">if</span>(id.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;node_modules&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> id.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;node_modules/&#x27;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// 拆分多个vendors</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>...<br><br></code></pre></td></tr></table></figure><h3 id="十、-完善项目架构"><a href="#十、-完善项目架构" class="headerlink" title="十、 完善项目架构"></a>十、 完善项目架构</h3><ol><li>增加 eslint</li><li>增加 prettier</li><li>增加git提交 husky + lint-staged + Commitlint 的校验</li><li>配置环境变量</li><li>引入 element-plus UI库并配置自动引入等</li></ol><p>这些就不赘述了，不清楚的可以直接去我项目里拉代码</p><p>⏰ 写在最后</p><p>在搭建的过程中，一定要注意因为修改了项目根目录（root）所带来的问题，利用 path.resolve(__dirname, …) 将路径重置到相对于项目根的位置！</p><p>关于如何使用这个多页面脚手架，可以看 README.md 文件。</p><p>项目源代码放在这了 <a href="https://github.com/shber/vite-multi-project">github源码</a>，对你有帮助请给个🌟，感谢🙏</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
